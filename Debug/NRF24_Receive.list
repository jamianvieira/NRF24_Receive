
NRF24_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059c0  080059c0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059c0  080059c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000078  08005a40  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005a40  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d502  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c74  00000000  00000000  0002d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001100d  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b701  00000000  00000000  0004159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061569  00000000  00000000  0004cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  000ae25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800537c 	.word	0x0800537c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800537c 	.word	0x0800537c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <NRF24_DelayMicroSeconds+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	490a      	ldr	r1, [pc, #40]	; (8000280 <NRF24_DelayMicroSeconds+0x3c>)
 8000256:	0018      	movs	r0, r3
 8000258:	f7ff ff68 	bl	800012c <__udivsi3>
 800025c:	0003      	movs	r3, r0
 800025e:	001a      	movs	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4353      	muls	r3, r2
 8000264:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	1e5a      	subs	r2, r3, #1
 800026c:	60fa      	str	r2, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1fa      	bne.n	8000268 <NRF24_DelayMicroSeconds+0x24>
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	b004      	add	sp, #16
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000008 	.word	0x20000008
 8000280:	002dc6c0 	.word	0x002dc6c0

08000284 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d008      	beq.n	80002a4 <NRF24_csn+0x20>
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <NRF24_csn+0x38>)
 8000294:	6818      	ldr	r0, [r3, #0]
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <NRF24_csn+0x3c>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	2201      	movs	r2, #1
 800029c:	0019      	movs	r1, r3
 800029e:	f001 ff47 	bl	8002130 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80002a2:	e007      	b.n	80002b4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <NRF24_csn+0x38>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <NRF24_csn+0x3c>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	2200      	movs	r2, #0
 80002ae:	0019      	movs	r1, r3
 80002b0:	f001 ff3e 	bl	8002130 <HAL_GPIO_WritePin>
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200000a4 	.word	0x200000a4
 80002c0:	200000a8 	.word	0x200000a8

080002c4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d008      	beq.n	80002e4 <NRF24_ce+0x20>
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <NRF24_ce+0x38>)
 80002d4:	6818      	ldr	r0, [r3, #0]
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <NRF24_ce+0x3c>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	2201      	movs	r2, #1
 80002dc:	0019      	movs	r1, r3
 80002de:	f001 ff27 	bl	8002130 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80002e2:	e007      	b.n	80002f4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <NRF24_ce+0x38>)
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <NRF24_ce+0x3c>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2200      	movs	r2, #0
 80002ee:	0019      	movs	r1, r3
 80002f0:	f001 ff1e 	bl	8002130 <HAL_GPIO_WritePin>
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b002      	add	sp, #8
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a4 	.word	0x200000a4
 8000300:	200000aa 	.word	0x200000aa

08000304 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	0002      	movs	r2, r0
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ffb7 	bl	8000284 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	221f      	movs	r2, #31
 800031c:	4013      	ands	r3, r2
 800031e:	b2da      	uxtb	r2, r3
 8000320:	240c      	movs	r4, #12
 8000322:	193b      	adds	r3, r7, r4
 8000324:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000326:	1939      	adds	r1, r7, r4
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_read_register+0x58>)
 800032a:	2364      	movs	r3, #100	; 0x64
 800032c:	2201      	movs	r2, #1
 800032e:	f002 fc41 	bl	8002bb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000332:	193b      	adds	r3, r7, r4
 8000334:	1c59      	adds	r1, r3, #1
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <NRF24_read_register+0x58>)
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2201      	movs	r2, #1
 800033c:	f002 fd92 	bl	8002e64 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000340:	250f      	movs	r5, #15
 8000342:	197b      	adds	r3, r7, r5
 8000344:	193a      	adds	r2, r7, r4
 8000346:	7852      	ldrb	r2, [r2, #1]
 8000348:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff9a 	bl	8000284 <NRF24_csn>
	return retData;
 8000350:	197b      	adds	r3, r7, r5
 8000352:	781b      	ldrb	r3, [r3, #0]
}
 8000354:	0018      	movs	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	b004      	add	sp, #16
 800035a:	bdb0      	pop	{r4, r5, r7, pc}
 800035c:	200000ac 	.word	0x200000ac

08000360 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6039      	str	r1, [r7, #0]
 8000368:	0011      	movs	r1, r2
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	1c02      	adds	r2, r0, #0
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	1c0a      	adds	r2, r1, #0
 8000374:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000376:	2000      	movs	r0, #0
 8000378:	f7ff ff84 	bl	8000284 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	221f      	movs	r2, #31
 8000382:	4013      	ands	r3, r2
 8000384:	b2da      	uxtb	r2, r3
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800038c:	1879      	adds	r1, r7, r1
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <NRF24_read_registerN+0x58>)
 8000390:	2364      	movs	r3, #100	; 0x64
 8000392:	2201      	movs	r2, #1
 8000394:	f002 fc0e 	bl	8002bb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000398:	1dbb      	adds	r3, r7, #6
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b29a      	uxth	r2, r3
 800039e:	6839      	ldr	r1, [r7, #0]
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <NRF24_read_registerN+0x58>)
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	f002 fd5e 	bl	8002e64 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f7ff ff6b 	bl	8000284 <NRF24_csn>
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b004      	add	sp, #16
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	200000ac 	.word	0x200000ac

080003bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	0002      	movs	r2, r0
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	1dbb      	adds	r3, r7, #6
 80003ca:	1c0a      	adds	r2, r1, #0
 80003cc:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff58 	bl	8000284 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2220      	movs	r2, #32
 80003da:	4313      	orrs	r3, r2
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	210c      	movs	r1, #12
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	1dba      	adds	r2, r7, #6
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <NRF24_write_register+0x4c>)
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	2202      	movs	r2, #2
 80003f4:	f002 fbde 	bl	8002bb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff43 	bl	8000284 <NRF24_csn>
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b004      	add	sp, #16
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	200000ac 	.word	0x200000ac

0800040c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6039      	str	r1, [r7, #0]
 8000414:	0011      	movs	r1, r2
 8000416:	1dfb      	adds	r3, r7, #7
 8000418:	1c02      	adds	r2, r0, #0
 800041a:	701a      	strb	r2, [r3, #0]
 800041c:	1dbb      	adds	r3, r7, #6
 800041e:	1c0a      	adds	r2, r1, #0
 8000420:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000422:	2000      	movs	r0, #0
 8000424:	f7ff ff2e 	bl	8000284 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2220      	movs	r2, #32
 800042e:	4313      	orrs	r3, r2
 8000430:	b2da      	uxtb	r2, r3
 8000432:	210c      	movs	r1, #12
 8000434:	187b      	adds	r3, r7, r1
 8000436:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000438:	1879      	adds	r1, r7, r1
 800043a:	480a      	ldr	r0, [pc, #40]	; (8000464 <NRF24_write_registerN+0x58>)
 800043c:	2364      	movs	r3, #100	; 0x64
 800043e:	2201      	movs	r2, #1
 8000440:	f002 fbb8 	bl	8002bb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b29a      	uxth	r2, r3
 800044a:	6839      	ldr	r1, [r7, #0]
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <NRF24_write_registerN+0x58>)
 800044e:	2364      	movs	r3, #100	; 0x64
 8000450:	f002 fbb0 	bl	8002bb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f7ff ff15 	bl	8000284 <NRF24_csn>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	200000ac 	.word	0x200000ac

08000468 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	000a      	movs	r2, r1
 8000472:	1cfb      	adds	r3, r7, #3
 8000474:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000476:	f000 fa63 	bl	8000940 <NRF24_getPayloadSize>
 800047a:	0003      	movs	r3, r0
 800047c:	001a      	movs	r2, r3
 800047e:	1cfb      	adds	r3, r7, #3
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4293      	cmp	r3, r2
 8000484:	d304      	bcc.n	8000490 <NRF24_read_payload+0x28>
 8000486:	f000 fa5b 	bl	8000940 <NRF24_getPayloadSize>
 800048a:	0003      	movs	r3, r0
 800048c:	001a      	movs	r2, r3
 800048e:	e001      	b.n	8000494 <NRF24_read_payload+0x2c>
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	240f      	movs	r4, #15
 8000496:	193b      	adds	r3, r7, r4
 8000498:	701a      	strb	r2, [r3, #0]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff fef2 	bl	8000284 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80004a0:	210e      	movs	r1, #14
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2261      	movs	r2, #97	; 0x61
 80004a6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80004a8:	1879      	adds	r1, r7, r1
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <NRF24_read_payload+0x6c>)
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	f002 fb80 	bl	8002bb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <NRF24_read_payload+0x6c>)
 80004be:	2364      	movs	r3, #100	; 0x64
 80004c0:	f002 fcd0 	bl	8002e64 <HAL_SPI_Receive>
	NRF24_csn(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff fedd 	bl	8000284 <NRF24_csn>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b005      	add	sp, #20
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	200000ac 	.word	0x200000ac

080004d8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80004dc:	21ff      	movs	r1, #255	; 0xff
 80004de:	20e1      	movs	r0, #225	; 0xe1
 80004e0:	f7ff ff6c 	bl	80003bc <NRF24_write_register>
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80004ee:	21ff      	movs	r1, #255	; 0xff
 80004f0:	20e2      	movs	r0, #226	; 0xe2
 80004f2:	f7ff ff63 	bl	80003bc <NRF24_write_register>
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000502:	1dfc      	adds	r4, r7, #7
 8000504:	2007      	movs	r0, #7
 8000506:	f7ff fefd 	bl	8000304 <NRF24_read_register>
 800050a:	0003      	movs	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]
	return statReg;
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b003      	add	sp, #12
 8000518:	bd90      	pop	{r4, r7, pc}
	...

0800051c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800051c:	b082      	sub	sp, #8
 800051e:	b590      	push	{r4, r7, lr}
 8000520:	46c6      	mov	lr, r8
 8000522:	b500      	push	{lr}
 8000524:	b084      	sub	sp, #16
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	0008      	movs	r0, r1
 800052c:	0011      	movs	r1, r2
 800052e:	2204      	movs	r2, #4
 8000530:	2418      	movs	r4, #24
 8000532:	46a4      	mov	ip, r4
 8000534:	2408      	movs	r4, #8
 8000536:	46a0      	mov	r8, r4
 8000538:	44b8      	add	r8, r7
 800053a:	44c4      	add	ip, r8
 800053c:	4462      	add	r2, ip
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	1cbb      	adds	r3, r7, #2
 8000542:	1c02      	adds	r2, r0, #0
 8000544:	801a      	strh	r2, [r3, #0]
 8000546:	003b      	movs	r3, r7
 8000548:	1c0a      	adds	r2, r1, #0
 800054a:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800054c:	4a74      	ldr	r2, [pc, #464]	; (8000720 <NRF24_begin+0x204>)
 800054e:	2304      	movs	r3, #4
 8000550:	2118      	movs	r1, #24
 8000552:	468c      	mov	ip, r1
 8000554:	2108      	movs	r1, #8
 8000556:	4688      	mov	r8, r1
 8000558:	44b8      	add	r8, r7
 800055a:	44c4      	add	ip, r8
 800055c:	4463      	add	r3, ip
 800055e:	0010      	movs	r0, r2
 8000560:	0019      	movs	r1, r3
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	001a      	movs	r2, r3
 8000566:	f003 fd97 	bl	8004098 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800056a:	4b6e      	ldr	r3, [pc, #440]	; (8000724 <NRF24_begin+0x208>)
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000570:	4b6d      	ldr	r3, [pc, #436]	; (8000728 <NRF24_begin+0x20c>)
 8000572:	1cba      	adds	r2, r7, #2
 8000574:	8812      	ldrh	r2, [r2, #0]
 8000576:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000578:	4b6c      	ldr	r3, [pc, #432]	; (800072c <NRF24_begin+0x210>)
 800057a:	003a      	movs	r2, r7
 800057c:	8812      	ldrh	r2, [r2, #0]
 800057e:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff fe7f 	bl	8000284 <NRF24_csn>
	NRF24_ce(0);
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe9c 	bl	80002c4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f001 fb87 	bl	8001ca0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000592:	2108      	movs	r1, #8
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff11 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800059a:	213f      	movs	r1, #63	; 0x3f
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff0d 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80005a2:	2103      	movs	r1, #3
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff ff09 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80005aa:	2103      	movs	r1, #3
 80005ac:	2003      	movs	r0, #3
 80005ae:	f7ff ff05 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80005b2:	2103      	movs	r1, #3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff01 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80005ba:	2102      	movs	r1, #2
 80005bc:	2005      	movs	r0, #5
 80005be:	f7ff fefd 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80005c2:	210f      	movs	r1, #15
 80005c4:	2006      	movs	r0, #6
 80005c6:	f7ff fef9 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80005ca:	210e      	movs	r1, #14
 80005cc:	2007      	movs	r0, #7
 80005ce:	f7ff fef5 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80005d2:	2100      	movs	r1, #0
 80005d4:	2008      	movs	r0, #8
 80005d6:	f7ff fef1 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80005da:	2100      	movs	r1, #0
 80005dc:	2009      	movs	r0, #9
 80005de:	f7ff feed 	bl	80003bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80005e2:	2108      	movs	r1, #8
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	22e7      	movs	r2, #231	; 0xe7
 80005e8:	711a      	strb	r2, [r3, #4]
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	22e7      	movs	r2, #231	; 0xe7
 80005ee:	70da      	strb	r2, [r3, #3]
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	22e7      	movs	r2, #231	; 0xe7
 80005f4:	709a      	strb	r2, [r3, #2]
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	22e7      	movs	r2, #231	; 0xe7
 80005fa:	705a      	strb	r2, [r3, #1]
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	22e7      	movs	r2, #231	; 0xe7
 8000600:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000602:	000c      	movs	r4, r1
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2205      	movs	r2, #5
 8000608:	0019      	movs	r1, r3
 800060a:	200a      	movs	r0, #10
 800060c:	f7ff fefe 	bl	800040c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000610:	0021      	movs	r1, r4
 8000612:	187b      	adds	r3, r7, r1
 8000614:	22c2      	movs	r2, #194	; 0xc2
 8000616:	711a      	strb	r2, [r3, #4]
 8000618:	187b      	adds	r3, r7, r1
 800061a:	22c2      	movs	r2, #194	; 0xc2
 800061c:	70da      	strb	r2, [r3, #3]
 800061e:	187b      	adds	r3, r7, r1
 8000620:	22c2      	movs	r2, #194	; 0xc2
 8000622:	709a      	strb	r2, [r3, #2]
 8000624:	187b      	adds	r3, r7, r1
 8000626:	22c2      	movs	r2, #194	; 0xc2
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	187b      	adds	r3, r7, r1
 800062c:	22c2      	movs	r2, #194	; 0xc2
 800062e:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000630:	000c      	movs	r4, r1
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2205      	movs	r2, #5
 8000636:	0019      	movs	r1, r3
 8000638:	200b      	movs	r0, #11
 800063a:	f7ff fee7 	bl	800040c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800063e:	21c3      	movs	r1, #195	; 0xc3
 8000640:	200c      	movs	r0, #12
 8000642:	f7ff febb 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000646:	21c4      	movs	r1, #196	; 0xc4
 8000648:	200d      	movs	r0, #13
 800064a:	f7ff feb7 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800064e:	21c5      	movs	r1, #197	; 0xc5
 8000650:	200e      	movs	r0, #14
 8000652:	f7ff feb3 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000656:	21c6      	movs	r1, #198	; 0xc6
 8000658:	200f      	movs	r0, #15
 800065a:	f7ff feaf 	bl	80003bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	22e7      	movs	r2, #231	; 0xe7
 8000664:	711a      	strb	r2, [r3, #4]
 8000666:	187b      	adds	r3, r7, r1
 8000668:	22e7      	movs	r2, #231	; 0xe7
 800066a:	70da      	strb	r2, [r3, #3]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	22e7      	movs	r2, #231	; 0xe7
 8000670:	709a      	strb	r2, [r3, #2]
 8000672:	187b      	adds	r3, r7, r1
 8000674:	22e7      	movs	r2, #231	; 0xe7
 8000676:	705a      	strb	r2, [r3, #1]
 8000678:	187b      	adds	r3, r7, r1
 800067a:	22e7      	movs	r2, #231	; 0xe7
 800067c:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2205      	movs	r2, #5
 8000682:	0019      	movs	r1, r3
 8000684:	2010      	movs	r0, #16
 8000686:	f7ff fec1 	bl	800040c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2011      	movs	r0, #17
 800068e:	f7ff fe95 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000692:	2100      	movs	r1, #0
 8000694:	2012      	movs	r0, #18
 8000696:	f7ff fe91 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800069a:	2100      	movs	r1, #0
 800069c:	2013      	movs	r0, #19
 800069e:	f7ff fe8d 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2014      	movs	r0, #20
 80006a6:	f7ff fe89 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2015      	movs	r0, #21
 80006ae:	f7ff fe85 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2016      	movs	r0, #22
 80006b6:	f7ff fe81 	bl	80003bc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80006ba:	f000 fac1 	bl	8000c40 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80006be:	2100      	movs	r1, #0
 80006c0:	201c      	movs	r0, #28
 80006c2:	f7ff fe7b 	bl	80003bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80006c6:	2100      	movs	r1, #0
 80006c8:	201d      	movs	r0, #29
 80006ca:	f7ff fe77 	bl	80003bc <NRF24_write_register>
	printRadioSettings();
 80006ce:	f000 fad3 	bl	8000c78 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80006d2:	210f      	movs	r1, #15
 80006d4:	200f      	movs	r0, #15
 80006d6:	f000 f8dd 	bl	8000894 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80006da:	2003      	movs	r0, #3
 80006dc:	f000 f977 	bl	80009ce <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 f9c5 	bl	8000a70 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f000 fa1e 	bl	8000b28 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80006ec:	f000 f93c 	bl	8000968 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80006f0:	2020      	movs	r0, #32
 80006f2:	f000 f909 	bl	8000908 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80006f6:	f000 fa9a 	bl	8000c2e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80006fa:	204c      	movs	r0, #76	; 0x4c
 80006fc:	f000 f8e8 	bl	80008d0 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000700:	f7ff feea 	bl	80004d8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000704:	f7ff fef1 	bl	80004ea <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000708:	f000 fa46 	bl	8000b98 <NRF24_powerDown>
	
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bc80      	pop	{r7}
 8000714:	46b8      	mov	r8, r7
 8000716:	bc90      	pop	{r4, r7}
 8000718:	bc08      	pop	{r3}
 800071a:	b002      	add	sp, #8
 800071c:	4718      	bx	r3
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	200000ac 	.word	0x200000ac
 8000724:	200000a4 	.word	0x200000a4
 8000728:	200000a8 	.word	0x200000a8
 800072c:	200000aa 	.word	0x200000aa

08000730 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fde5 	bl	8000304 <NRF24_read_register>
 800073a:	0003      	movs	r3, r0
 800073c:	001a      	movs	r2, r3
 800073e:	2303      	movs	r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0019      	movs	r1, r3
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fe38 	bl	80003bc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <NRF24_startListening+0x50>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	0011      	movs	r1, r2
 8000754:	4319      	orrs	r1, r3
 8000756:	d005      	beq.n	8000764 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <NRF24_startListening+0x50>)
 800075a:	2205      	movs	r2, #5
 800075c:	0019      	movs	r1, r3
 800075e:	200a      	movs	r0, #10
 8000760:	f7ff fe54 	bl	800040c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000764:	f7ff feb8 	bl	80004d8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000768:	f7ff febf 	bl	80004ea <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fda9 	bl	80002c4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000772:	2096      	movs	r0, #150	; 0x96
 8000774:	f7ff fd66 	bl	8000244 <NRF24_DelayMicroSeconds>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000098 	.word	0x20000098

08000784 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fa17 	bl	8000bbc <NRF24_availablePipe>
 800078e:	0003      	movs	r3, r0
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000796:	b590      	push	{r4, r7, lr}
 8000798:	b085      	sub	sp, #20
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	000a      	movs	r2, r1
 80007a0:	1cfb      	adds	r3, r7, #3
 80007a2:	701a      	strb	r2, [r3, #0]
	NRF24_read_payload( buf, len );
 80007a4:	1cfb      	adds	r3, r7, #3
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fe5b 	bl	8000468 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80007b2:	2017      	movs	r0, #23
 80007b4:	f7ff fda6 	bl	8000304 <NRF24_read_register>
 80007b8:	0003      	movs	r3, r0
 80007ba:	0019      	movs	r1, r3
 80007bc:	240f      	movs	r4, #15
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2201      	movs	r2, #1
 80007c2:	400a      	ands	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
	NRF24_flush_rx();
 80007c6:	f7ff fe90 	bl	80004ea <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80007ca:	f000 f8c3 	bl	8000954 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	4193      	sbcs	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b005      	add	sp, #20
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0001      	movs	r1, r0
 80007e8:	603a      	str	r2, [r7, #0]
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	200f      	movs	r0, #15
 80007ee:	183b      	adds	r3, r7, r0
 80007f0:	1c0a      	adds	r2, r1, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	if (number == 0)
 80007f4:	183b      	adds	r3, r7, r0
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <NRF24_openReadingPipe+0x26>
    pipe0_reading_address = address;
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4920      	ldr	r1, [pc, #128]	; (8000884 <NRF24_openReadingPipe+0xa4>)
 8000802:	600a      	str	r2, [r1, #0]
 8000804:	604b      	str	r3, [r1, #4]
	
	if(number <= 6)
 8000806:	220f      	movs	r2, #15
 8000808:	18bb      	adds	r3, r7, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b06      	cmp	r3, #6
 800080e:	d834      	bhi.n	800087a <NRF24_openReadingPipe+0x9a>
	{
		if(number < 2)
 8000810:	18bb      	adds	r3, r7, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d809      	bhi.n	800082c <NRF24_openReadingPipe+0x4c>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000818:	18bb      	adds	r3, r7, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <NRF24_openReadingPipe+0xa8>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	0039      	movs	r1, r7
 8000822:	2205      	movs	r2, #5
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff fdf1 	bl	800040c <NRF24_write_registerN>
 800082a:	e009      	b.n	8000840 <NRF24_openReadingPipe+0x60>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <NRF24_openReadingPipe+0xa8>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	0039      	movs	r1, r7
 8000838:	2201      	movs	r2, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff fde6 	bl	800040c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000840:	240f      	movs	r4, #15
 8000842:	193b      	adds	r3, r7, r4
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <NRF24_openReadingPipe+0xac>)
 8000848:	5cd2      	ldrb	r2, [r2, r3]
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <NRF24_openReadingPipe+0xb0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0019      	movs	r1, r3
 8000850:	0010      	movs	r0, r2
 8000852:	f7ff fdb3 	bl	80003bc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fd54 	bl	8000304 <NRF24_read_register>
 800085c:	0003      	movs	r3, r0
 800085e:	b25a      	sxtb	r2, r3
 8000860:	193b      	adds	r3, r7, r4
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	4099      	lsls	r1, r3
 8000868:	000b      	movs	r3, r1
 800086a:	b25b      	sxtb	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b25b      	sxtb	r3, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	0019      	movs	r1, r3
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fda1 	bl	80003bc <NRF24_write_register>
	}
	
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b005      	add	sp, #20
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000098 	.word	0x20000098
 8000888:	08005900 	.word	0x08005900
 800088c:	08005908 	.word	0x08005908
 8000890:	200000a0 	.word	0x200000a0

08000894 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	1c0a      	adds	r2, r1, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	210f      	movs	r1, #15
 80008b6:	400b      	ands	r3, r1
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	0019      	movs	r1, r3
 80008c2:	2004      	movs	r0, #4
 80008c4:	f7ff fd7a 	bl	80003bc <NRF24_write_register>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	0002      	movs	r2, r0
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 80008dc:	210f      	movs	r1, #15
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	227f      	movs	r2, #127	; 0x7f
 80008e2:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	1dfa      	adds	r2, r7, #7
 80008e8:	7810      	ldrb	r0, [r2, #0]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	b2c2      	uxtb	r2, r0
 80008f0:	4291      	cmp	r1, r2
 80008f2:	d900      	bls.n	80008f6 <NRF24_setChannel+0x26>
 80008f4:	1c03      	adds	r3, r0, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	0019      	movs	r1, r3
 80008fa:	2005      	movs	r0, #5
 80008fc:	f7ff fd5e 	bl	80003bc <NRF24_write_register>
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b004      	add	sp, #16
 8000906:	bd80      	pop	{r7, pc}

08000908 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000914:	210f      	movs	r1, #15
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2220      	movs	r2, #32
 800091a:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	1dfa      	adds	r2, r7, #7
 8000920:	7810      	ldrb	r0, [r2, #0]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	b2c2      	uxtb	r2, r0
 8000928:	4291      	cmp	r1, r2
 800092a:	d900      	bls.n	800092e <NRF24_setPayloadSize+0x26>
 800092c:	1c03      	adds	r3, r0, #0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <NRF24_setPayloadSize+0x34>)
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000a0 	.word	0x200000a0

08000940 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	return payload_size;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <NRF24_getPayloadSize+0x10>)
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	200000a0 	.word	0x200000a0

08000954 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000958:	2060      	movs	r0, #96	; 0x60
 800095a:	f7ff fcd3 	bl	8000304 <NRF24_read_register>
 800095e:	0003      	movs	r3, r0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800096c:	201d      	movs	r0, #29
 800096e:	f7ff fcc9 	bl	8000304 <NRF24_read_register>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	2304      	movs	r3, #4
 8000978:	439a      	bics	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	0019      	movs	r1, r3
 8000980:	201d      	movs	r0, #29
 8000982:	f7ff fd1b 	bl	80003bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000986:	2100      	movs	r1, #0
 8000988:	201c      	movs	r0, #28
 800098a:	f7ff fd17 	bl	80003bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800098e:	4b03      	ldr	r3, [pc, #12]	; (800099c <NRF24_disableDynamicPayloads+0x34>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	200000a1 	.word	0x200000a1

080009a0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	701a      	strb	r2, [r3, #0]
	if ( enable )
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d004      	beq.n	80009be <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80009b4:	213f      	movs	r1, #63	; 0x3f
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fd00 	bl	80003bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80009bc:	e003      	b.n	80009c6 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fcfb 	bl	80003bc <NRF24_write_register>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}

080009ce <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80009ce:	b5b0      	push	{r4, r5, r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	0002      	movs	r2, r0
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80009da:	250f      	movs	r5, #15
 80009dc:	197c      	adds	r4, r7, r5
 80009de:	2006      	movs	r0, #6
 80009e0:	f7ff fc90 	bl	8000304 <NRF24_read_register>
 80009e4:	0003      	movs	r3, r0
 80009e6:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009e8:	0028      	movs	r0, r5
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	183a      	adds	r2, r7, r0
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	2106      	movs	r1, #6
 80009f2:	438a      	bics	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d106      	bne.n	8000a0c <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009fe:	183b      	adds	r3, r7, r0
 8000a00:	183a      	adds	r2, r7, r0
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	2106      	movs	r1, #6
 8000a06:	430a      	orrs	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e026      	b.n	8000a5a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d107      	bne.n	8000a24 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a14:	220f      	movs	r2, #15
 8000a16:	18bb      	adds	r3, r7, r2
 8000a18:	18ba      	adds	r2, r7, r2
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e01a      	b.n	8000a5a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	18bb      	adds	r3, r7, r2
 8000a30:	18ba      	adds	r2, r7, r2
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e00e      	b.n	8000a5a <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00a      	beq.n	8000a5a <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d106      	bne.n	8000a5a <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	18bb      	adds	r3, r7, r2
 8000a50:	18ba      	adds	r2, r7, r2
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	2106      	movs	r1, #6
 8000a56:	430a      	orrs	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	0019      	movs	r1, r3
 8000a62:	2006      	movs	r0, #6
 8000a64:	f7ff fcaa 	bl	80003bc <NRF24_write_register>
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b004      	add	sp, #16
 8000a6e:	bdb0      	pop	{r4, r5, r7, pc}

08000a70 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a84:	250e      	movs	r5, #14
 8000a86:	197c      	adds	r4, r7, r5
 8000a88:	2006      	movs	r0, #6
 8000a8a:	f7ff fc3b 	bl	8000304 <NRF24_read_register>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <NRF24_setDataRate+0xb4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a98:	0028      	movs	r0, r5
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	183a      	adds	r2, r7, r0
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	2128      	movs	r1, #40	; 0x28
 8000aa2:	438a      	bics	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d109      	bne.n	8000ac2 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <NRF24_setDataRate+0xb4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	183a      	adds	r2, r7, r0
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	2120      	movs	r1, #32
 8000abc:	430a      	orrs	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e011      	b.n	8000ae6 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10a      	bne.n	8000ae0 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <NRF24_setDataRate+0xb4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000ad0:	220e      	movs	r2, #14
 8000ad2:	18bb      	adds	r3, r7, r2
 8000ad4:	18ba      	adds	r2, r7, r2
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	2108      	movs	r1, #8
 8000ada:	430a      	orrs	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e002      	b.n	8000ae6 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <NRF24_setDataRate+0xb4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000ae6:	240e      	movs	r4, #14
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	0019      	movs	r1, r3
 8000aee:	2006      	movs	r0, #6
 8000af0:	f7ff fc64 	bl	80003bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000af4:	2006      	movs	r0, #6
 8000af6:	f7ff fc05 	bl	8000304 <NRF24_read_register>
 8000afa:	0003      	movs	r3, r0
 8000afc:	001a      	movs	r2, r3
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d104      	bne.n	8000b10 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e002      	b.n	8000b16 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <NRF24_setDataRate+0xb4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bdb0      	pop	{r4, r5, r7, pc}
 8000b24:	200000a2 	.word	0x200000a2

08000b28 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fbe5 	bl	8000304 <NRF24_read_register>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	200f      	movs	r0, #15
 8000b40:	183b      	adds	r3, r7, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	4391      	bics	r1, r2
 8000b46:	000a      	movs	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d017      	beq.n	8000b82 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d106      	bne.n	8000b68 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	183a      	adds	r2, r7, r0
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	2108      	movs	r1, #8
 8000b62:	430a      	orrs	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e00c      	b.n	8000b82 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b68:	200f      	movs	r0, #15
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	183a      	adds	r2, r7, r0
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	2108      	movs	r1, #8
 8000b72:	430a      	orrs	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000b76:	183b      	adds	r3, r7, r0
 8000b78:	183a      	adds	r2, r7, r0
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	0019      	movs	r1, r3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fc16 	bl	80003bc <NRF24_write_register>
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fbb1 	bl	8000304 <NRF24_read_register>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	439a      	bics	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	0019      	movs	r1, r3
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fc03 	bl	80003bc <NRF24_write_register>
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000bc4:	250f      	movs	r5, #15
 8000bc6:	197c      	adds	r4, r7, r5
 8000bc8:	f7ff fc98 	bl	80004fc <NRF24_get_status>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000bd0:	0028      	movs	r0, r5
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	401a      	ands	r2, r3
 8000bda:	240e      	movs	r4, #14
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	1e51      	subs	r1, r2, #1
 8000be0:	418a      	sbcs	r2, r1
 8000be2:	701a      	strb	r2, [r3, #0]

  if (result)
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	085b      	lsrs	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	2007      	movs	r0, #7
 8000c08:	f7ff fbd8 	bl	80003bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2220      	movs	r2, #32
 8000c14:	4013      	ands	r3, r2
 8000c16:	d003      	beq.n	8000c20 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000c18:	2120      	movs	r1, #32
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f7ff fbce 	bl	80003bc <NRF24_write_register>
    }
  }
  return result;
 8000c20:	230e      	movs	r3, #14
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781b      	ldrb	r3, [r3, #0]
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bdb0      	pop	{r4, r5, r7, pc}

08000c2e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000c32:	2170      	movs	r1, #112	; 0x70
 8000c34:	2007      	movs	r0, #7
 8000c36:	f7ff fbc1 	bl	80003bc <NRF24_write_register>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fb1c 	bl	8000284 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2250      	movs	r2, #80	; 0x50
 8000c50:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2273      	movs	r2, #115	; 0x73
 8000c56:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000c58:	1d39      	adds	r1, r7, #4
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <NRF24_ACTIVATE_cmd+0x34>)
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	2202      	movs	r2, #2
 8000c60:	f001 ffa8 	bl	8002bb4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fb0d 	bl	8000284 <NRF24_csn>
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	200000ac 	.word	0x200000ac

08000c78 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	46c6      	mov	lr, r8
 8000c7c:	b500      	push	{lr}
 8000c7e:	b0a0      	sub	sp, #128	; 0x80
 8000c80:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c82:	4ac2      	ldr	r2, [pc, #776]	; (8000f8c <printRadioSettings+0x314>)
 8000c84:	2508      	movs	r5, #8
 8000c86:	197b      	adds	r3, r7, r5
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f003 fa30 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c90:	197b      	adds	r3, r7, r5
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fa38 	bl	8000108 <strlen>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	1979      	adds	r1, r7, r5
 8000c9e:	48bc      	ldr	r0, [pc, #752]	; (8000f90 <printRadioSettings+0x318>)
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	f002 fe25 	bl	80038f0 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ca6:	266f      	movs	r6, #111	; 0x6f
 8000ca8:	19bc      	adds	r4, r7, r6
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fb2a 	bl	8000304 <NRF24_read_register>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3))
 8000cb4:	0031      	movs	r1, r6
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <printRadioSettings+0x70>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d006      	beq.n	8000cd8 <printRadioSettings+0x60>
 8000cca:	4ab2      	ldr	r2, [pc, #712]	; (8000f94 <printRadioSettings+0x31c>)
 8000ccc:	197b      	adds	r3, r7, r5
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f003 fa0d 	bl	80040f0 <siprintf>
 8000cd6:	e00e      	b.n	8000cf6 <printRadioSettings+0x7e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000cd8:	4aaf      	ldr	r2, [pc, #700]	; (8000f98 <printRadioSettings+0x320>)
 8000cda:	2308      	movs	r3, #8
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f003 fa05 	bl	80040f0 <siprintf>
 8000ce6:	e006      	b.n	8000cf6 <printRadioSettings+0x7e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000ce8:	4aac      	ldr	r2, [pc, #688]	; (8000f9c <printRadioSettings+0x324>)
 8000cea:	2308      	movs	r3, #8
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f003 f9fd 	bl	80040f0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cf6:	2408      	movs	r4, #8
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fa04 	bl	8000108 <strlen>
 8000d00:	0003      	movs	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	1939      	adds	r1, r7, r4
 8000d06:	48a2      	ldr	r0, [pc, #648]	; (8000f90 <printRadioSettings+0x318>)
 8000d08:	230a      	movs	r3, #10
 8000d0a:	f002 fdf1 	bl	80038f0 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000d0e:	256f      	movs	r5, #111	; 0x6f
 8000d10:	197c      	adds	r4, r7, r5
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff faf6 	bl	8000304 <NRF24_read_register>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d1c:	0029      	movs	r1, r5
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d26:	17da      	asrs	r2, r3, #31
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	0fdb      	lsrs	r3, r3, #31
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d38:	17da      	asrs	r2, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	0fdb      	lsrs	r3, r3, #31
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2204      	movs	r2, #4
 8000d48:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d4a:	17da      	asrs	r2, r3, #31
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	0fdb      	lsrs	r3, r3, #31
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2208      	movs	r2, #8
 8000d5a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	0fdb      	lsrs	r3, r3, #31
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d6e:	17da      	asrs	r2, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	0fdb      	lsrs	r3, r3, #31
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d80:	17da      	asrs	r2, r3, #31
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	0fdb      	lsrs	r3, r3, #31
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4985      	ldr	r1, [pc, #532]	; (8000fa0 <printRadioSettings+0x328>)
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	18b8      	adds	r0, r7, r2
 8000d8e:	9303      	str	r3, [sp, #12]
 8000d90:	9602      	str	r6, [sp, #8]
 8000d92:	9501      	str	r5, [sp, #4]
 8000d94:	9400      	str	r4, [sp, #0]
 8000d96:	4643      	mov	r3, r8
 8000d98:	4662      	mov	r2, ip
 8000d9a:	f003 f9a9 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d9e:	2408      	movs	r4, #8
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9b0 	bl	8000108 <strlen>
 8000da8:	0003      	movs	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	1939      	adds	r1, r7, r4
 8000dae:	4878      	ldr	r0, [pc, #480]	; (8000f90 <printRadioSettings+0x318>)
 8000db0:	230a      	movs	r3, #10
 8000db2:	f002 fd9d 	bl	80038f0 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000db6:	216f      	movs	r1, #111	; 0x6f
 8000db8:	000d      	movs	r5, r1
 8000dba:	187c      	adds	r4, r7, r1
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f7ff faa1 	bl	8000304 <NRF24_read_register>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dc6:	0029      	movs	r1, r5
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dd0:	17da      	asrs	r2, r3, #31
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	0fdb      	lsrs	r3, r3, #31
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2202      	movs	r2, #2
 8000de0:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000de2:	17da      	asrs	r2, r3, #31
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	0fdb      	lsrs	r3, r3, #31
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2204      	movs	r2, #4
 8000df2:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000df4:	17da      	asrs	r2, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	0fdb      	lsrs	r3, r3, #31
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2208      	movs	r2, #8
 8000e04:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e06:	17da      	asrs	r2, r3, #31
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	0fdb      	lsrs	r3, r3, #31
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2210      	movs	r2, #16
 8000e16:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e18:	17da      	asrs	r2, r3, #31
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	0fdb      	lsrs	r3, r3, #31
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2220      	movs	r2, #32
 8000e28:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e2a:	17da      	asrs	r2, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	0fdb      	lsrs	r3, r3, #31
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	495c      	ldr	r1, [pc, #368]	; (8000fa4 <printRadioSettings+0x32c>)
 8000e34:	2208      	movs	r2, #8
 8000e36:	18b8      	adds	r0, r7, r2
 8000e38:	9303      	str	r3, [sp, #12]
 8000e3a:	9602      	str	r6, [sp, #8]
 8000e3c:	9501      	str	r5, [sp, #4]
 8000e3e:	9400      	str	r4, [sp, #0]
 8000e40:	4643      	mov	r3, r8
 8000e42:	4662      	mov	r2, ip
 8000e44:	f003 f954 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e48:	2508      	movs	r5, #8
 8000e4a:	197b      	adds	r3, r7, r5
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff f95b 	bl	8000108 <strlen>
 8000e52:	0003      	movs	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	1979      	adds	r1, r7, r5
 8000e58:	484d      	ldr	r0, [pc, #308]	; (8000f90 <printRadioSettings+0x318>)
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	f002 fd48 	bl	80038f0 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff fa4f 	bl	8000304 <NRF24_read_register>
 8000e66:	0003      	movs	r3, r0
 8000e68:	0019      	movs	r1, r3
 8000e6a:	246f      	movs	r4, #111	; 0x6f
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2203      	movs	r2, #3
 8000e70:	400a      	ands	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
	reg8Val +=2;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	193a      	adds	r2, r7, r4
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	3202      	adds	r2, #2
 8000e7c:	701a      	strb	r2, [r3, #0]
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4949      	ldr	r1, [pc, #292]	; (8000fa8 <printRadioSettings+0x330>)
 8000e84:	002e      	movs	r6, r5
 8000e86:	19bb      	adds	r3, r7, r6
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f003 f931 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e8e:	19bb      	adds	r3, r7, r6
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff f939 	bl	8000108 <strlen>
 8000e96:	0003      	movs	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	19b9      	adds	r1, r7, r6
 8000e9c:	483c      	ldr	r0, [pc, #240]	; (8000f90 <printRadioSettings+0x318>)
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	f002 fd26 	bl	80038f0 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000ea4:	0025      	movs	r5, r4
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	2005      	movs	r0, #5
 8000eaa:	f7ff fa2b 	bl	8000304 <NRF24_read_register>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000eb2:	002c      	movs	r4, r5
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	227f      	movs	r2, #127	; 0x7f
 8000eba:	401a      	ands	r2, r3
 8000ebc:	493b      	ldr	r1, [pc, #236]	; (8000fac <printRadioSettings+0x334>)
 8000ebe:	19bb      	adds	r3, r7, r6
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f003 f915 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ec6:	19bb      	adds	r3, r7, r6
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff f91d 	bl	8000108 <strlen>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	19b9      	adds	r1, r7, r6
 8000ed4:	482e      	ldr	r0, [pc, #184]	; (8000f90 <printRadioSettings+0x318>)
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	f002 fd0a 	bl	80038f0 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000edc:	0025      	movs	r5, r4
 8000ede:	193c      	adds	r4, r7, r4
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f7ff fa0f 	bl	8000304 <NRF24_read_register>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d006      	beq.n	8000f02 <printRadioSettings+0x28a>
 8000ef4:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <printRadioSettings+0x338>)
 8000ef6:	19bb      	adds	r3, r7, r6
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f003 f8f8 	bl	80040f0 <siprintf>
 8000f00:	e006      	b.n	8000f10 <printRadioSettings+0x298>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <printRadioSettings+0x33c>)
 8000f04:	2308      	movs	r3, #8
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f003 f8f0 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f10:	2408      	movs	r4, #8
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff f8f7 	bl	8000108 <strlen>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	1939      	adds	r1, r7, r4
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <printRadioSettings+0x318>)
 8000f22:	230a      	movs	r3, #10
 8000f24:	f002 fce4 	bl	80038f0 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f28:	206f      	movs	r0, #111	; 0x6f
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	183a      	adds	r2, r7, r0
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	2106      	movs	r1, #6
 8000f32:	400a      	ands	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
	reg8Val = (reg8Val>>1);
 8000f36:	0001      	movs	r1, r0
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	187a      	adds	r2, r7, r1
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0852      	lsrs	r2, r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <printRadioSettings+0x2e0>
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <printRadioSettings+0x340>)
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f003 f8cd 	bl	80040f0 <siprintf>
 8000f56:	e041      	b.n	8000fdc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f58:	236f      	movs	r3, #111	; 0x6f
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d107      	bne.n	8000f72 <printRadioSettings+0x2fa>
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <printRadioSettings+0x344>)
 8000f64:	2308      	movs	r3, #8
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f003 f8c0 	bl	80040f0 <siprintf>
 8000f70:	e034      	b.n	8000fdc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f72:	236f      	movs	r3, #111	; 0x6f
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d123      	bne.n	8000fc4 <printRadioSettings+0x34c>
 8000f7c:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <printRadioSettings+0x348>)
 8000f7e:	2308      	movs	r3, #8
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f003 f8b3 	bl	80040f0 <siprintf>
 8000f8a:	e027      	b.n	8000fdc <printRadioSettings+0x364>
 8000f8c:	08005394 	.word	0x08005394
 8000f90:	20000110 	.word	0x20000110
 8000f94:	080053c8 	.word	0x080053c8
 8000f98:	080053e4 	.word	0x080053e4
 8000f9c:	08005400 	.word	0x08005400
 8000fa0:	08005414 	.word	0x08005414
 8000fa4:	08005458 	.word	0x08005458
 8000fa8:	080054a4 	.word	0x080054a4
 8000fac:	080054c0 	.word	0x080054c0
 8000fb0:	080054d4 	.word	0x080054d4
 8000fb4:	080054ec 	.word	0x080054ec
 8000fb8:	08005504 	.word	0x08005504
 8000fbc:	08005518 	.word	0x08005518
 8000fc0:	0800552c 	.word	0x0800552c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000fc4:	236f      	movs	r3, #111	; 0x6f
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d106      	bne.n	8000fdc <printRadioSettings+0x364>
 8000fce:	4afe      	ldr	r2, [pc, #1016]	; (80013c8 <printRadioSettings+0x750>)
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f003 f88a 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fdc:	2408      	movs	r4, #8
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff f891 	bl	8000108 <strlen>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	1939      	adds	r1, r7, r4
 8000fec:	48f7      	ldr	r0, [pc, #988]	; (80013cc <printRadioSettings+0x754>)
 8000fee:	230a      	movs	r3, #10
 8000ff0:	f002 fc7e 	bl	80038f0 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff f9b0 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001000:	003b      	movs	r3, r7
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	001d      	movs	r5, r3
 8001006:	003b      	movs	r3, r7
 8001008:	78db      	ldrb	r3, [r3, #3]
 800100a:	001e      	movs	r6, r3
 800100c:	003b      	movs	r3, r7
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	001a      	movs	r2, r3
 8001012:	003b      	movs	r3, r7
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	001c      	movs	r4, r3
 8001018:	003b      	movs	r3, r7
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	49ec      	ldr	r1, [pc, #944]	; (80013d0 <printRadioSettings+0x758>)
 800101e:	2008      	movs	r0, #8
 8001020:	1838      	adds	r0, r7, r0
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	9401      	str	r4, [sp, #4]
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	0033      	movs	r3, r6
 800102a:	002a      	movs	r2, r5
 800102c:	f003 f860 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001030:	2408      	movs	r4, #8
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff f867 	bl	8000108 <strlen>
 800103a:	0003      	movs	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	1939      	adds	r1, r7, r4
 8001040:	48e2      	ldr	r0, [pc, #904]	; (80013cc <printRadioSettings+0x754>)
 8001042:	230a      	movs	r3, #10
 8001044:	f002 fc54 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001048:	003b      	movs	r3, r7
 800104a:	2205      	movs	r2, #5
 800104c:	0019      	movs	r1, r3
 800104e:	200b      	movs	r0, #11
 8001050:	f7ff f986 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001054:	003b      	movs	r3, r7
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	001d      	movs	r5, r3
 800105a:	003b      	movs	r3, r7
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	001e      	movs	r6, r3
 8001060:	003b      	movs	r3, r7
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	001a      	movs	r2, r3
 8001066:	003b      	movs	r3, r7
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	001c      	movs	r4, r3
 800106c:	003b      	movs	r3, r7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	49d8      	ldr	r1, [pc, #864]	; (80013d4 <printRadioSettings+0x75c>)
 8001072:	2008      	movs	r0, #8
 8001074:	1838      	adds	r0, r7, r0
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	9401      	str	r4, [sp, #4]
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	0033      	movs	r3, r6
 800107e:	002a      	movs	r2, r5
 8001080:	f003 f836 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001084:	2408      	movs	r4, #8
 8001086:	193b      	adds	r3, r7, r4
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff f83d 	bl	8000108 <strlen>
 800108e:	0003      	movs	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	1939      	adds	r1, r7, r4
 8001094:	48cd      	ldr	r0, [pc, #820]	; (80013cc <printRadioSettings+0x754>)
 8001096:	230a      	movs	r3, #10
 8001098:	f002 fc2a 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800109c:	003b      	movs	r3, r7
 800109e:	2201      	movs	r2, #1
 80010a0:	0019      	movs	r1, r3
 80010a2:	200c      	movs	r0, #12
 80010a4:	f7ff f95c 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010a8:	003b      	movs	r3, r7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	001a      	movs	r2, r3
 80010ae:	49ca      	ldr	r1, [pc, #808]	; (80013d8 <printRadioSettings+0x760>)
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 f81c 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff f824 	bl	8000108 <strlen>
 80010c0:	0003      	movs	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	1939      	adds	r1, r7, r4
 80010c6:	48c1      	ldr	r0, [pc, #772]	; (80013cc <printRadioSettings+0x754>)
 80010c8:	230a      	movs	r3, #10
 80010ca:	f002 fc11 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80010ce:	003b      	movs	r3, r7
 80010d0:	2201      	movs	r2, #1
 80010d2:	0019      	movs	r1, r3
 80010d4:	200d      	movs	r0, #13
 80010d6:	f7ff f943 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010da:	003b      	movs	r3, r7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	49be      	ldr	r1, [pc, #760]	; (80013dc <printRadioSettings+0x764>)
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	0018      	movs	r0, r3
 80010e6:	f003 f803 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff f80b 	bl	8000108 <strlen>
 80010f2:	0003      	movs	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	1939      	adds	r1, r7, r4
 80010f8:	48b4      	ldr	r0, [pc, #720]	; (80013cc <printRadioSettings+0x754>)
 80010fa:	230a      	movs	r3, #10
 80010fc:	f002 fbf8 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001100:	003b      	movs	r3, r7
 8001102:	2201      	movs	r2, #1
 8001104:	0019      	movs	r1, r3
 8001106:	200e      	movs	r0, #14
 8001108:	f7ff f92a 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800110c:	003b      	movs	r3, r7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	49b3      	ldr	r1, [pc, #716]	; (80013e0 <printRadioSettings+0x768>)
 8001114:	193b      	adds	r3, r7, r4
 8001116:	0018      	movs	r0, r3
 8001118:	f002 ffea 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800111c:	193b      	adds	r3, r7, r4
 800111e:	0018      	movs	r0, r3
 8001120:	f7fe fff2 	bl	8000108 <strlen>
 8001124:	0003      	movs	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	1939      	adds	r1, r7, r4
 800112a:	48a8      	ldr	r0, [pc, #672]	; (80013cc <printRadioSettings+0x754>)
 800112c:	230a      	movs	r3, #10
 800112e:	f002 fbdf 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001132:	003b      	movs	r3, r7
 8001134:	2201      	movs	r2, #1
 8001136:	0019      	movs	r1, r3
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff f911 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800113e:	003b      	movs	r3, r7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	001a      	movs	r2, r3
 8001144:	49a7      	ldr	r1, [pc, #668]	; (80013e4 <printRadioSettings+0x76c>)
 8001146:	193b      	adds	r3, r7, r4
 8001148:	0018      	movs	r0, r3
 800114a:	f002 ffd1 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	f7fe ffd9 	bl	8000108 <strlen>
 8001156:	0003      	movs	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	1939      	adds	r1, r7, r4
 800115c:	489b      	ldr	r0, [pc, #620]	; (80013cc <printRadioSettings+0x754>)
 800115e:	230a      	movs	r3, #10
 8001160:	f002 fbc6 	bl	80038f0 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001164:	003b      	movs	r3, r7
 8001166:	2205      	movs	r2, #5
 8001168:	0019      	movs	r1, r3
 800116a:	2010      	movs	r0, #16
 800116c:	f7ff f8f8 	bl	8000360 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001170:	003b      	movs	r3, r7
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	001d      	movs	r5, r3
 8001176:	003b      	movs	r3, r7
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	001e      	movs	r6, r3
 800117c:	003b      	movs	r3, r7
 800117e:	789b      	ldrb	r3, [r3, #2]
 8001180:	001a      	movs	r2, r3
 8001182:	003b      	movs	r3, r7
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	001c      	movs	r4, r3
 8001188:	003b      	movs	r3, r7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4996      	ldr	r1, [pc, #600]	; (80013e8 <printRadioSettings+0x770>)
 800118e:	2008      	movs	r0, #8
 8001190:	1838      	adds	r0, r7, r0
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	9401      	str	r4, [sp, #4]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	0033      	movs	r3, r6
 800119a:	002a      	movs	r2, r5
 800119c:	f002 ffa8 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	2508      	movs	r5, #8
 80011a2:	197b      	adds	r3, r7, r5
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7fe ffaf 	bl	8000108 <strlen>
 80011aa:	0003      	movs	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	1979      	adds	r1, r7, r5
 80011b0:	4886      	ldr	r0, [pc, #536]	; (80013cc <printRadioSettings+0x754>)
 80011b2:	230a      	movs	r3, #10
 80011b4:	f002 fb9c 	bl	80038f0 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80011b8:	266f      	movs	r6, #111	; 0x6f
 80011ba:	19bc      	adds	r4, r7, r6
 80011bc:	2011      	movs	r0, #17
 80011be:	f7ff f8a1 	bl	8000304 <NRF24_read_register>
 80011c2:	0003      	movs	r3, r0
 80011c4:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c6:	0034      	movs	r4, r6
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	223f      	movs	r2, #63	; 0x3f
 80011ce:	401a      	ands	r2, r3
 80011d0:	4986      	ldr	r1, [pc, #536]	; (80013ec <printRadioSettings+0x774>)
 80011d2:	197b      	adds	r3, r7, r5
 80011d4:	0018      	movs	r0, r3
 80011d6:	f002 ff8b 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	197b      	adds	r3, r7, r5
 80011dc:	0018      	movs	r0, r3
 80011de:	f7fe ff93 	bl	8000108 <strlen>
 80011e2:	0003      	movs	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	1979      	adds	r1, r7, r5
 80011e8:	4878      	ldr	r0, [pc, #480]	; (80013cc <printRadioSettings+0x754>)
 80011ea:	230a      	movs	r3, #10
 80011ec:	f002 fb80 	bl	80038f0 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80011f0:	0026      	movs	r6, r4
 80011f2:	193c      	adds	r4, r7, r4
 80011f4:	2012      	movs	r0, #18
 80011f6:	f7ff f885 	bl	8000304 <NRF24_read_register>
 80011fa:	0003      	movs	r3, r0
 80011fc:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011fe:	0034      	movs	r4, r6
 8001200:	193b      	adds	r3, r7, r4
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	223f      	movs	r2, #63	; 0x3f
 8001206:	401a      	ands	r2, r3
 8001208:	4979      	ldr	r1, [pc, #484]	; (80013f0 <printRadioSettings+0x778>)
 800120a:	197b      	adds	r3, r7, r5
 800120c:	0018      	movs	r0, r3
 800120e:	f002 ff6f 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001212:	197b      	adds	r3, r7, r5
 8001214:	0018      	movs	r0, r3
 8001216:	f7fe ff77 	bl	8000108 <strlen>
 800121a:	0003      	movs	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	1979      	adds	r1, r7, r5
 8001220:	486a      	ldr	r0, [pc, #424]	; (80013cc <printRadioSettings+0x754>)
 8001222:	230a      	movs	r3, #10
 8001224:	f002 fb64 	bl	80038f0 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001228:	0026      	movs	r6, r4
 800122a:	193c      	adds	r4, r7, r4
 800122c:	2013      	movs	r0, #19
 800122e:	f7ff f869 	bl	8000304 <NRF24_read_register>
 8001232:	0003      	movs	r3, r0
 8001234:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001236:	0034      	movs	r4, r6
 8001238:	193b      	adds	r3, r7, r4
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	223f      	movs	r2, #63	; 0x3f
 800123e:	401a      	ands	r2, r3
 8001240:	496c      	ldr	r1, [pc, #432]	; (80013f4 <printRadioSettings+0x77c>)
 8001242:	197b      	adds	r3, r7, r5
 8001244:	0018      	movs	r0, r3
 8001246:	f002 ff53 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124a:	197b      	adds	r3, r7, r5
 800124c:	0018      	movs	r0, r3
 800124e:	f7fe ff5b 	bl	8000108 <strlen>
 8001252:	0003      	movs	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	1979      	adds	r1, r7, r5
 8001258:	485c      	ldr	r0, [pc, #368]	; (80013cc <printRadioSettings+0x754>)
 800125a:	230a      	movs	r3, #10
 800125c:	f002 fb48 	bl	80038f0 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001260:	0026      	movs	r6, r4
 8001262:	193c      	adds	r4, r7, r4
 8001264:	2014      	movs	r0, #20
 8001266:	f7ff f84d 	bl	8000304 <NRF24_read_register>
 800126a:	0003      	movs	r3, r0
 800126c:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800126e:	0034      	movs	r4, r6
 8001270:	193b      	adds	r3, r7, r4
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	223f      	movs	r2, #63	; 0x3f
 8001276:	401a      	ands	r2, r3
 8001278:	495f      	ldr	r1, [pc, #380]	; (80013f8 <printRadioSettings+0x780>)
 800127a:	197b      	adds	r3, r7, r5
 800127c:	0018      	movs	r0, r3
 800127e:	f002 ff37 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001282:	197b      	adds	r3, r7, r5
 8001284:	0018      	movs	r0, r3
 8001286:	f7fe ff3f 	bl	8000108 <strlen>
 800128a:	0003      	movs	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	1979      	adds	r1, r7, r5
 8001290:	484e      	ldr	r0, [pc, #312]	; (80013cc <printRadioSettings+0x754>)
 8001292:	230a      	movs	r3, #10
 8001294:	f002 fb2c 	bl	80038f0 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001298:	0026      	movs	r6, r4
 800129a:	193c      	adds	r4, r7, r4
 800129c:	2015      	movs	r0, #21
 800129e:	f7ff f831 	bl	8000304 <NRF24_read_register>
 80012a2:	0003      	movs	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012a6:	0034      	movs	r4, r6
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	223f      	movs	r2, #63	; 0x3f
 80012ae:	401a      	ands	r2, r3
 80012b0:	4952      	ldr	r1, [pc, #328]	; (80013fc <printRadioSettings+0x784>)
 80012b2:	197b      	adds	r3, r7, r5
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 ff1b 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ba:	197b      	adds	r3, r7, r5
 80012bc:	0018      	movs	r0, r3
 80012be:	f7fe ff23 	bl	8000108 <strlen>
 80012c2:	0003      	movs	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	1979      	adds	r1, r7, r5
 80012c8:	4840      	ldr	r0, [pc, #256]	; (80013cc <printRadioSettings+0x754>)
 80012ca:	230a      	movs	r3, #10
 80012cc:	f002 fb10 	bl	80038f0 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80012d0:	0026      	movs	r6, r4
 80012d2:	193c      	adds	r4, r7, r4
 80012d4:	2016      	movs	r0, #22
 80012d6:	f7ff f815 	bl	8000304 <NRF24_read_register>
 80012da:	0003      	movs	r3, r0
 80012dc:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012de:	0034      	movs	r4, r6
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	223f      	movs	r2, #63	; 0x3f
 80012e6:	401a      	ands	r2, r3
 80012e8:	4945      	ldr	r1, [pc, #276]	; (8001400 <printRadioSettings+0x788>)
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	0018      	movs	r0, r3
 80012ee:	f002 feff 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7fe ff07 	bl	8000108 <strlen>
 80012fa:	0003      	movs	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	1979      	adds	r1, r7, r5
 8001300:	4832      	ldr	r0, [pc, #200]	; (80013cc <printRadioSettings+0x754>)
 8001302:	230a      	movs	r3, #10
 8001304:	f002 faf4 	bl	80038f0 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001308:	0026      	movs	r6, r4
 800130a:	193c      	adds	r4, r7, r4
 800130c:	201c      	movs	r0, #28
 800130e:	f7fe fff9 	bl	8000304 <NRF24_read_register>
 8001312:	0003      	movs	r3, r0
 8001314:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001316:	0031      	movs	r1, r6
 8001318:	187b      	adds	r3, r7, r1
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001320:	17da      	asrs	r2, r3, #31
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	0fdb      	lsrs	r3, r3, #31
 8001326:	b2db      	uxtb	r3, r3
 8001328:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800132a:	187b      	adds	r3, r7, r1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001332:	17da      	asrs	r2, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	0fdb      	lsrs	r3, r3, #31
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800133c:	187b      	adds	r3, r7, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2204      	movs	r2, #4
 8001342:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001344:	17da      	asrs	r2, r3, #31
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	0fdb      	lsrs	r3, r3, #31
 800134a:	b2db      	uxtb	r3, r3
 800134c:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800134e:	187b      	adds	r3, r7, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2208      	movs	r2, #8
 8001354:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001356:	17da      	asrs	r2, r3, #31
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	0fdb      	lsrs	r3, r3, #31
 800135c:	b2db      	uxtb	r3, r3
 800135e:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001360:	187b      	adds	r3, r7, r1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2210      	movs	r2, #16
 8001366:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	0fdb      	lsrs	r3, r3, #31
 800136e:	b2db      	uxtb	r3, r3
 8001370:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001372:	187b      	adds	r3, r7, r1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2220      	movs	r2, #32
 8001378:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800137a:	17da      	asrs	r2, r3, #31
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	0fdb      	lsrs	r3, r3, #31
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4920      	ldr	r1, [pc, #128]	; (8001404 <printRadioSettings+0x78c>)
 8001384:	2208      	movs	r2, #8
 8001386:	18b8      	adds	r0, r7, r2
 8001388:	9303      	str	r3, [sp, #12]
 800138a:	9602      	str	r6, [sp, #8]
 800138c:	9501      	str	r5, [sp, #4]
 800138e:	9400      	str	r4, [sp, #0]
 8001390:	4643      	mov	r3, r8
 8001392:	4662      	mov	r2, ip
 8001394:	f002 feac 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001398:	2508      	movs	r5, #8
 800139a:	197b      	adds	r3, r7, r5
 800139c:	0018      	movs	r0, r3
 800139e:	f7fe feb3 	bl	8000108 <strlen>
 80013a2:	0003      	movs	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	1979      	adds	r1, r7, r5
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <printRadioSettings+0x754>)
 80013aa:	230a      	movs	r3, #10
 80013ac:	f002 faa0 	bl	80038f0 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80013b0:	266f      	movs	r6, #111	; 0x6f
 80013b2:	19bc      	adds	r4, r7, r6
 80013b4:	201d      	movs	r0, #29
 80013b6:	f7fe ffa5 	bl	8000304 <NRF24_read_register>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80013be:	19bb      	adds	r3, r7, r6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2204      	movs	r2, #4
 80013c4:	4013      	ands	r3, r2
 80013c6:	e01f      	b.n	8001408 <printRadioSettings+0x790>
 80013c8:	08005540 	.word	0x08005540
 80013cc:	20000110 	.word	0x20000110
 80013d0:	08005554 	.word	0x08005554
 80013d4:	08005584 	.word	0x08005584
 80013d8:	080055b4 	.word	0x080055b4
 80013dc:	080055dc 	.word	0x080055dc
 80013e0:	08005604 	.word	0x08005604
 80013e4:	0800562c 	.word	0x0800562c
 80013e8:	08005654 	.word	0x08005654
 80013ec:	08005680 	.word	0x08005680
 80013f0:	0800569c 	.word	0x0800569c
 80013f4:	080056b8 	.word	0x080056b8
 80013f8:	080056d4 	.word	0x080056d4
 80013fc:	080056f0 	.word	0x080056f0
 8001400:	0800570c 	.word	0x0800570c
 8001404:	08005728 	.word	0x08005728
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <printRadioSettings+0x7a2>
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <printRadioSettings+0x838>)
 800140e:	197b      	adds	r3, r7, r5
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f002 fe6c 	bl	80040f0 <siprintf>
 8001418:	e006      	b.n	8001428 <printRadioSettings+0x7b0>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <printRadioSettings+0x83c>)
 800141c:	2308      	movs	r3, #8
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	0011      	movs	r1, r2
 8001422:	0018      	movs	r0, r3
 8001424:	f002 fe64 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001428:	2408      	movs	r4, #8
 800142a:	193b      	adds	r3, r7, r4
 800142c:	0018      	movs	r0, r3
 800142e:	f7fe fe6b 	bl	8000108 <strlen>
 8001432:	0003      	movs	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	1939      	adds	r1, r7, r4
 8001438:	481f      	ldr	r0, [pc, #124]	; (80014b8 <printRadioSettings+0x840>)
 800143a:	230a      	movs	r3, #10
 800143c:	f002 fa58 	bl	80038f0 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001440:	236f      	movs	r3, #111	; 0x6f
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d006      	beq.n	800145a <printRadioSettings+0x7e2>
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <printRadioSettings+0x844>)
 800144e:	193b      	adds	r3, r7, r4
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f002 fe4c 	bl	80040f0 <siprintf>
 8001458:	e006      	b.n	8001468 <printRadioSettings+0x7f0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <printRadioSettings+0x848>)
 800145c:	2308      	movs	r3, #8
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f002 fe44 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001468:	2408      	movs	r4, #8
 800146a:	193b      	adds	r3, r7, r4
 800146c:	0018      	movs	r0, r3
 800146e:	f7fe fe4b 	bl	8000108 <strlen>
 8001472:	0003      	movs	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	1939      	adds	r1, r7, r4
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <printRadioSettings+0x840>)
 800147a:	230a      	movs	r3, #10
 800147c:	f002 fa38 	bl	80038f0 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <printRadioSettings+0x84c>)
 8001482:	193b      	adds	r3, r7, r4
 8001484:	0011      	movs	r1, r2
 8001486:	0018      	movs	r0, r3
 8001488:	f002 fe32 	bl	80040f0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148c:	193b      	adds	r3, r7, r4
 800148e:	0018      	movs	r0, r3
 8001490:	f7fe fe3a 	bl	8000108 <strlen>
 8001494:	0003      	movs	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	1939      	adds	r1, r7, r4
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <printRadioSettings+0x840>)
 800149c:	230a      	movs	r3, #10
 800149e:	f002 fa27 	bl	80038f0 <HAL_UART_Transmit>
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b01c      	add	sp, #112	; 0x70
 80014a8:	bc80      	pop	{r7}
 80014aa:	46b8      	mov	r8, r7
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	08005774 	.word	0x08005774
 80014b4:	0800578c 	.word	0x0800578c
 80014b8:	20000110 	.word	0x20000110
 80014bc:	080057a4 	.word	0x080057a4
 80014c0:	080057c0 	.word	0x080057c0
 80014c4:	08005394 	.word	0x08005394

080014c8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80014c8:	b084      	sub	sp, #16
 80014ca:	b5b0      	push	{r4, r5, r7, lr}
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	2510      	movs	r5, #16
 80014d0:	197c      	adds	r4, r7, r5
 80014d2:	6020      	str	r0, [r4, #0]
 80014d4:	6061      	str	r1, [r4, #4]
 80014d6:	60a2      	str	r2, [r4, #8]
 80014d8:	60e3      	str	r3, [r4, #12]
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <nrf24_DebugUART_Init+0x30>)
 80014dc:	197b      	adds	r3, r7, r5
 80014de:	0010      	movs	r0, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	2384      	movs	r3, #132	; 0x84
 80014e4:	001a      	movs	r2, r3
 80014e6:	f002 fdd7 	bl	8004098 <memcpy>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bcb0      	pop	{r4, r5, r7}
 80014f0:	bc08      	pop	{r3}
 80014f2:	b004      	add	sp, #16
 80014f4:	4718      	bx	r3
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000110 	.word	0x20000110

080014fc <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t RxpipeAddrs = 0x11223344AA;
char myRxData[50];

int _write(int file, char *outgoing, int len) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart2, outgoing, len, 100);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	b29a      	uxth	r2, r3
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <_write+0x24>)
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	f002 f9ed 	bl	80038f0 <HAL_UART_Transmit>
   return len;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000238 	.word	0x20000238

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	46c6      	mov	lr, r8
 8001528:	b500      	push	{lr}
 800152a:	b09e      	sub	sp, #120	; 0x78
 800152c:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f000 fb53 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001532:	f000 f859 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001536:	f000 f90d 	bl	8001754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800153a:	f000 f8db 	bl	80016f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800153e:	f000 f89b 	bl	8001678 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi1);
 8001542:	4c23      	ldr	r4, [pc, #140]	; (80015d0 <main+0xac>)
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	009e      	lsls	r6, r3, #2
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	005d      	lsls	r5, r3, #1
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <main+0xb0>)
 800154e:	4698      	mov	r8, r3
 8001550:	466b      	mov	r3, sp
 8001552:	0018      	movs	r0, r3
 8001554:	1d23      	adds	r3, r4, #4
 8001556:	2260      	movs	r2, #96	; 0x60
 8001558:	0019      	movs	r1, r3
 800155a:	f002 fd9d 	bl	8004098 <memcpy>
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	0032      	movs	r2, r6
 8001562:	0029      	movs	r1, r5
 8001564:	4640      	mov	r0, r8
 8001566:	f7fe ffd9 	bl	800051c <NRF24_begin>

  nrf24_DebugUART_Init(huart2);
 800156a:	4c1b      	ldr	r4, [pc, #108]	; (80015d8 <main+0xb4>)
 800156c:	466b      	mov	r3, sp
 800156e:	0018      	movs	r0, r3
 8001570:	0023      	movs	r3, r4
 8001572:	3310      	adds	r3, #16
 8001574:	2274      	movs	r2, #116	; 0x74
 8001576:	0019      	movs	r1, r3
 8001578:	f002 fd8e 	bl	8004098 <memcpy>
 800157c:	6820      	ldr	r0, [r4, #0]
 800157e:	6861      	ldr	r1, [r4, #4]
 8001580:	68a2      	ldr	r2, [r4, #8]
 8001582:	68e3      	ldr	r3, [r4, #12]
 8001584:	f7ff ffa0 	bl	80014c8 <nrf24_DebugUART_Init>


  NRF24_setAutoAck(false);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fa09 	bl	80009a0 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 800158e:	2034      	movs	r0, #52	; 0x34
 8001590:	f7ff f99e 	bl	80008d0 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001594:	2020      	movs	r0, #32
 8001596:	f7ff f9b7 	bl	8000908 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <main+0xb8>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff f91d 	bl	80007e0 <NRF24_openReadingPipe>
  NRF24_startListening();
 80015a6:	f7ff f8c3 	bl	8000730 <NRF24_startListening>
  printRadioSettings();
 80015aa:	f7ff fb65 	bl	8000c78 <printRadioSettings>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(NRF24_available()){
 80015ae:	f7ff f8e9 	bl	8000784 <NRF24_available>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d0fb      	beq.n	80015ae <main+0x8a>
		NRF24_read(myRxData, 32);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <main+0xbc>)
 80015b8:	2120      	movs	r1, #32
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff f8eb 	bl	8000796 <NRF24_read>

		printf("%s \r\n", myRxData);
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <main+0xbc>)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <main+0xc0>)
 80015c4:	0011      	movs	r1, r2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f002 fd78 	bl	80040bc <iprintf>
	if(NRF24_available()){
 80015cc:	e7ef      	b.n	80015ae <main+0x8a>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	200001d4 	.word	0x200001d4
 80015d4:	48000400 	.word	0x48000400
 80015d8:	20000238 	.word	0x20000238
 80015dc:	20000000 	.word	0x20000000
 80015e0:	200001a0 	.word	0x200001a0
 80015e4:	080058d8 	.word	0x080058d8

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b091      	sub	sp, #68	; 0x44
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	2410      	movs	r4, #16
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	0018      	movs	r0, r3
 80015f4:	2330      	movs	r3, #48	; 0x30
 80015f6:	001a      	movs	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	f002 fd56 	bl	80040aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fe:	003b      	movs	r3, r7
 8001600:	0018      	movs	r0, r3
 8001602:	2310      	movs	r3, #16
 8001604:	001a      	movs	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	f002 fd4f 	bl	80040aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	0021      	movs	r1, r4
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2205      	movs	r2, #5
 8001618:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2202      	movs	r2, #2
 800161e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	0252      	lsls	r2, r2, #9
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	0352      	lsls	r2, r2, #13
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	187b      	adds	r3, r7, r1
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fd97 	bl	800216c <HAL_RCC_OscConfig>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001642:	f000 f91b 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	003b      	movs	r3, r7
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	003b      	movs	r3, r7
 800164e:	2202      	movs	r2, #2
 8001650:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	003b      	movs	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001658:	003b      	movs	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800165e:	003b      	movs	r3, r7
 8001660:	2101      	movs	r1, #1
 8001662:	0018      	movs	r0, r3
 8001664:	f001 f89c 	bl	80027a0 <HAL_RCC_ClockConfig>
 8001668:	1e03      	subs	r3, r0, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800166c:	f000 f906 	bl	800187c <Error_Handler>
  }
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b011      	add	sp, #68	; 0x44
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_SPI1_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_SPI1_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_SPI1_Init+0x74>)
 8001684:	2282      	movs	r2, #130	; 0x82
 8001686:	0052      	lsls	r2, r2, #1
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_SPI1_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI1_Init+0x74>)
 8001692:	22e0      	movs	r2, #224	; 0xe0
 8001694:	00d2      	lsls	r2, r2, #3
 8001696:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_SPI1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI1_Init+0x74>)
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI1_Init+0x74>)
 80016ae:	2220      	movs	r2, #32
 80016b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_SPI1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI1_Init+0x74>)
 80016c6:	2207      	movs	r2, #7
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_SPI1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI1_Init+0x74>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MX_SPI1_Init+0x74>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 f9b3 	bl	8002a44 <HAL_SPI_Init>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 f8cb 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001d4 	.word	0x200001d4
 80016f0:	40013000 	.word	0x40013000

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART2_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <MX_USART2_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001700:	2296      	movs	r2, #150	; 0x96
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART2_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001738:	0018      	movs	r0, r3
 800173a:	f002 f885 	bl	8003848 <HAL_UART_Init>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f89b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000238 	.word	0x20000238
 8001750:	40004400 	.word	0x40004400

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	2414      	movs	r4, #20
 800175c:	193b      	adds	r3, r7, r4
 800175e:	0018      	movs	r0, r3
 8001760:	2314      	movs	r3, #20
 8001762:	001a      	movs	r2, r3
 8001764:	2100      	movs	r1, #0
 8001766:	f002 fca0 	bl	80040aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <MX_GPIO_Init+0x11c>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <MX_GPIO_Init+0x11c>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0309      	lsls	r1, r1, #12
 8001774:	430a      	orrs	r2, r1
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <MX_GPIO_Init+0x11c>)
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	031b      	lsls	r3, r3, #12
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <MX_GPIO_Init+0x11c>)
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <MX_GPIO_Init+0x11c>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	03c9      	lsls	r1, r1, #15
 8001790:	430a      	orrs	r2, r1
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <MX_GPIO_Init+0x11c>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	03db      	lsls	r3, r3, #15
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0289      	lsls	r1, r1, #10
 80017ac:	430a      	orrs	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	02c9      	lsls	r1, r1, #11
 80017c8:	430a      	orrs	r2, r1
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <MX_GPIO_Init+0x11c>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	02db      	lsls	r3, r3, #11
 80017d4:	4013      	ands	r3, r2
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017da:	2390      	movs	r3, #144	; 0x90
 80017dc:	05db      	lsls	r3, r3, #23
 80017de:	2200      	movs	r2, #0
 80017e0:	2120      	movs	r1, #32
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fca4 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 80017e8:	23c0      	movs	r3, #192	; 0xc0
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4821      	ldr	r0, [pc, #132]	; (8001874 <MX_GPIO_Init+0x120>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	0019      	movs	r1, r3
 80017f2:	f000 fc9d 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0192      	lsls	r2, r2, #6
 80017fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2284      	movs	r2, #132	; 0x84
 8001802:	0392      	lsls	r2, r2, #14
 8001804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800180c:	193b      	adds	r3, r7, r4
 800180e:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <MX_GPIO_Init+0x124>)
 8001810:	0019      	movs	r1, r3
 8001812:	0010      	movs	r0, r2
 8001814:	f000 fb1c 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001818:	193b      	adds	r3, r7, r4
 800181a:	2220      	movs	r2, #32
 800181c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	193b      	adds	r3, r7, r4
 8001820:	2201      	movs	r2, #1
 8001822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	193a      	adds	r2, r7, r4
 8001832:	2390      	movs	r3, #144	; 0x90
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f000 fb09 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 800183e:	0021      	movs	r1, r4
 8001840:	187b      	adds	r3, r7, r1
 8001842:	22c0      	movs	r2, #192	; 0xc0
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2201      	movs	r2, #1
 800184c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	187b      	adds	r3, r7, r1
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <MX_GPIO_Init+0x120>)
 800185e:	0019      	movs	r1, r3
 8001860:	0010      	movs	r0, r2
 8001862:	f000 faf5 	bl	8001e50 <HAL_GPIO_Init>

}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b00b      	add	sp, #44	; 0x2c
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400
 8001878:	48000800 	.word	0x48000800

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_MspInit+0x44>)
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	055b      	lsls	r3, r3, #21
 80018bc:	4013      	ands	r3, r2
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b08b      	sub	sp, #44	; 0x2c
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	2414      	movs	r4, #20
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	0018      	movs	r0, r3
 80018de:	2314      	movs	r3, #20
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f002 fbe1 	bl	80040aa <memset>
  if(hspi->Instance==SPI1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <HAL_SPI_MspInit+0xd8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d155      	bne.n	800199e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0149      	lsls	r1, r1, #5
 80018fc:	430a      	orrs	r2, r1
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0289      	lsls	r1, r1, #10
 8001918:	430a      	orrs	r2, r1
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	02c9      	lsls	r1, r1, #11
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_SPI_MspInit+0xdc>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	02db      	lsls	r3, r3, #11
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	22c0      	movs	r2, #192	; 0xc0
 800194a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	193b      	adds	r3, r7, r4
 800194e:	2202      	movs	r2, #2
 8001950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	193b      	adds	r3, r7, r4
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001958:	193b      	adds	r3, r7, r4
 800195a:	2203      	movs	r2, #3
 800195c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	193a      	adds	r2, r7, r4
 8001966:	2390      	movs	r3, #144	; 0x90
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f000 fa6f 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001972:	0021      	movs	r1, r4
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2208      	movs	r2, #8
 8001978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2202      	movs	r2, #2
 800197e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2203      	movs	r2, #3
 800198a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	187b      	adds	r3, r7, r1
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_SPI_MspInit+0xe0>)
 8001996:	0019      	movs	r1, r3
 8001998:	0010      	movs	r0, r2
 800199a:	f000 fa59 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b00b      	add	sp, #44	; 0x2c
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40013000 	.word	0x40013000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000400 	.word	0x48000400

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	2414      	movs	r4, #20
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	2314      	movs	r3, #20
 80019c4:	001a      	movs	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	f002 fb6f 	bl	80040aa <memset>
  if(huart->Instance==USART2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_UART_MspInit+0x90>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d132      	bne.n	8001a3c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0289      	lsls	r1, r1, #10
 80019e0:	430a      	orrs	r2, r1
 80019e2:	61da      	str	r2, [r3, #28]
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019e6:	69da      	ldr	r2, [r3, #28]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0289      	lsls	r1, r1, #10
 80019fc:	430a      	orrs	r2, r1
 80019fe:	615a      	str	r2, [r3, #20]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x94>)
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a0e:	0021      	movs	r1, r4
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2202      	movs	r2, #2
 8001a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	187a      	adds	r2, r7, r1
 8001a30:	2390      	movs	r3, #144	; 0x90
 8001a32:	05db      	lsls	r3, r3, #23
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fa0a 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b00b      	add	sp, #44	; 0x2c
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40021000 	.word	0x40021000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f8fa 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a8c:	e000      	b.n	8001a90 <_read+0x16>
 8001a8e:	bf00      	nop
 8001a90:	0001      	movs	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
	}

return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b006      	add	sp, #24
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	return -1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	425b      	negs	r3, r3
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	0192      	lsls	r2, r2, #6
 8001ad8:	605a      	str	r2, [r3, #4]
	return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_isatty>:

int _isatty(int file)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
	return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f002 fa82 	bl	8004044 <__errno>
 8001b40:	0003      	movs	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	425b      	negs	r3, r3
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	18d2      	adds	r2, r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20002000 	.word	0x20002000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	20000194 	.word	0x20000194
 8001b74:	200002d0 	.word	0x200002d0

08001b78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0b      	ldr	r4, [pc, #44]	; (8001bd0 <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bae:	f7ff ffe3 	bl	8001b78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bb2:	f002 fa4d 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff fcb5 	bl	8001524 <main>

08001bba <LoopForever>:

LoopForever:
    b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   r0, =_estack
 8001bbc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bc8:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 8001bcc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bd0:	200002d0 	.word	0x200002d0

08001bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_Init+0x24>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_Init+0x24>)
 8001be2:	2110      	movs	r1, #16
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f000 f809 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bee:	f7ff fe4b 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	0019      	movs	r1, r3
 8001c12:	23fa      	movs	r3, #250	; 0xfa
 8001c14:	0098      	lsls	r0, r3, #2
 8001c16:	f7fe fa89 	bl	800012c <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f7fe fa84 	bl	800012c <__udivsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f905 	bl	8001e36 <HAL_SYSTICK_Config>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e00f      	b.n	8001c54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d80b      	bhi.n	8001c52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	425b      	negs	r3, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f8e2 	bl	8001e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_InitTick+0x64>)
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b003      	add	sp, #12
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000010 	.word	0x20000010
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	001a      	movs	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x20>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	18d2      	adds	r2, r2, r3
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_IncTick+0x20>)
 8001c7a:	601a      	str	r2, [r3, #0]
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000010 	.word	0x20000010
 8001c88:	200002bc 	.word	0x200002bc

08001c8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_GetTick+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	200002bc 	.word	0x200002bc

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	f7ff ffe0 	bl	8001c8c <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b004      	add	sp, #16
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	0002      	movs	r2, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfc:	d828      	bhi.n	8001d50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	33c0      	adds	r3, #192	; 0xc0
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	589b      	ldr	r3, [r3, r2]
 8001d0e:	1dfa      	adds	r2, r7, #7
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	0011      	movs	r1, r2
 8001d14:	2203      	movs	r2, #3
 8001d16:	400a      	ands	r2, r1
 8001d18:	00d2      	lsls	r2, r2, #3
 8001d1a:	21ff      	movs	r1, #255	; 0xff
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	43d2      	mvns	r2, r2
 8001d22:	401a      	ands	r2, r3
 8001d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	2303      	movs	r3, #3
 8001d36:	4003      	ands	r3, r0
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	33c0      	adds	r3, #192	; 0xc0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d4e:	e031      	b.n	8001db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	0019      	movs	r1, r3
 8001d58:	230f      	movs	r3, #15
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3306      	adds	r3, #6
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1dfa      	adds	r2, r7, #7
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	2203      	movs	r2, #3
 8001d72:	400a      	ands	r2, r1
 8001d74:	00d2      	lsls	r2, r2, #3
 8001d76:	21ff      	movs	r1, #255	; 0xff
 8001d78:	4091      	lsls	r1, r2
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	43d2      	mvns	r2, r2
 8001d7e:	401a      	ands	r2, r3
 8001d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	401a      	ands	r2, r3
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	2303      	movs	r3, #3
 8001d92:	4003      	ands	r3, r0
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	001c      	movs	r4, r3
 8001da0:	230f      	movs	r3, #15
 8001da2:	4023      	ands	r3, r4
 8001da4:	3b08      	subs	r3, #8
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	430a      	orrs	r2, r1
 8001daa:	3306      	adds	r3, #6
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	18c3      	adds	r3, r0, r3
 8001db0:	3304      	adds	r3, #4
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b003      	add	sp, #12
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	045b      	lsls	r3, r3, #17
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d301      	bcc.n	8001ddc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e010      	b.n	8001dfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <SysTick_Config+0x44>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	3a01      	subs	r2, #1
 8001de2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	2103      	movs	r1, #3
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff7c 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x44>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	210f      	movs	r1, #15
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff ffbf 	bl	8001dc4 <SysTick_Config>
 8001e46:	0003      	movs	r3, r0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e14f      	b.n	8002100 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <HAL_GPIO_Init+0x28>
 8001e76:	e140      	b.n	80020fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	2201      	movs	r2, #1
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	58d3      	ldr	r3, [r2, r3]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2107      	movs	r1, #7
 8001f66:	400b      	ands	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_GPIO_Init+0x174>
 8001fc2:	e09a      	b.n	80020fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fdc:	4a4f      	ldr	r2, [pc, #316]	; (800211c <HAL_GPIO_Init+0x2cc>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	2390      	movs	r3, #144	; 0x90
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1e2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_GPIO_Init+0x2d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1de>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1da>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_GPIO_Init+0x2d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002022:	2303      	movs	r3, #3
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002026:	2305      	movs	r3, #5
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002032:	2300      	movs	r3, #0
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	2103      	movs	r1, #3
 8002038:	400a      	ands	r2, r1
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <HAL_GPIO_Init+0x2cc>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4013      	ands	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_GPIO_Init+0x2dc>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	035b      	lsls	r3, r3, #13
 80020be:	4013      	ands	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	4013      	ands	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	40da      	lsrs	r2, r3
 8002108:	1e13      	subs	r3, r2, #0
 800210a:	d000      	beq.n	800210e <HAL_GPIO_Init+0x2be>
 800210c:	e6a8      	b.n	8001e60 <HAL_GPIO_Init+0x10>
  } 
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	48000400 	.word	0x48000400
 8002124:	48000800 	.word	0x48000800
 8002128:	48000c00 	.word	0x48000c00
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	1cbb      	adds	r3, r7, #2
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	1c7b      	adds	r3, r7, #1
 8002144:	1c0a      	adds	r2, r1, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002148:	1c7b      	adds	r3, r7, #1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215a:	1cbb      	adds	r3, r7, #2
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e301      	b.n	8002782 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d100      	bne.n	800218a <HAL_RCC_OscConfig+0x1e>
 8002188:	e08d      	b.n	80022a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800218a:	4bc3      	ldr	r3, [pc, #780]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	220c      	movs	r2, #12
 8002190:	4013      	ands	r3, r2
 8002192:	2b04      	cmp	r3, #4
 8002194:	d00e      	beq.n	80021b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002196:	4bc0      	ldr	r3, [pc, #768]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	220c      	movs	r2, #12
 800219c:	4013      	ands	r3, r2
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x64>
 80021a2:	4bbd      	ldr	r3, [pc, #756]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	401a      	ands	r2, r3
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4bb8      	ldr	r3, [pc, #736]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x56>
 80021c0:	e070      	b.n	80022a4 <HAL_RCC_OscConfig+0x138>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d000      	beq.n	80021cc <HAL_RCC_OscConfig+0x60>
 80021ca:	e06b      	b.n	80022a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e2d8      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x7c>
 80021d8:	4baf      	ldr	r3, [pc, #700]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4bae      	ldr	r3, [pc, #696]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0249      	lsls	r1, r1, #9
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e02f      	b.n	8002248 <HAL_RCC_OscConfig+0xdc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x9e>
 80021f0:	4ba9      	ldr	r3, [pc, #676]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4ba8      	ldr	r3, [pc, #672]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	49a9      	ldr	r1, [pc, #676]	; (800249c <HAL_RCC_OscConfig+0x330>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	4ba6      	ldr	r3, [pc, #664]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4ba5      	ldr	r3, [pc, #660]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002202:	49a7      	ldr	r1, [pc, #668]	; (80024a0 <HAL_RCC_OscConfig+0x334>)
 8002204:	400a      	ands	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e01e      	b.n	8002248 <HAL_RCC_OscConfig+0xdc>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d10e      	bne.n	8002230 <HAL_RCC_OscConfig+0xc4>
 8002212:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	02c9      	lsls	r1, r1, #11
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	4b9d      	ldr	r3, [pc, #628]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b9c      	ldr	r3, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0249      	lsls	r1, r1, #9
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xdc>
 8002230:	4b99      	ldr	r3, [pc, #612]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b98      	ldr	r3, [pc, #608]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002236:	4999      	ldr	r1, [pc, #612]	; (800249c <HAL_RCC_OscConfig+0x330>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4b96      	ldr	r3, [pc, #600]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b95      	ldr	r3, [pc, #596]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002242:	4997      	ldr	r1, [pc, #604]	; (80024a0 <HAL_RCC_OscConfig+0x334>)
 8002244:	400a      	ands	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d014      	beq.n	800227a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fd1c 	bl	8001c8c <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225a:	f7ff fd17 	bl	8001c8c <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e28a      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226c:	4b8a      	ldr	r3, [pc, #552]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0xee>
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fd07 	bl	8001c8c <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff fd02 	bl	8001c8c <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e275      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b80      	ldr	r3, [pc, #512]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x118>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_RCC_OscConfig+0x146>
 80022b0:	e069      	b.n	8002386 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022b2:	4b79      	ldr	r3, [pc, #484]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	220c      	movs	r2, #12
 80022b8:	4013      	ands	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	220c      	movs	r2, #12
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11c      	bne.n	8002302 <HAL_RCC_OscConfig+0x196>
 80022c8:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	025b      	lsls	r3, r3, #9
 80022d0:	4013      	ands	r3, r2
 80022d2:	d116      	bne.n	8002302 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x17e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e24b      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	22f8      	movs	r2, #248	; 0xf8
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00da      	lsls	r2, r3, #3
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002300:	e041      	b.n	8002386 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d024      	beq.n	8002354 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fcb9 	bl	8001c8c <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff fcb4 	bl	8001c8c <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e227      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22f8      	movs	r2, #248	; 0xf8
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00da      	lsls	r2, r3, #3
 800234c:	4b52      	ldr	r3, [pc, #328]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800235a:	2101      	movs	r1, #1
 800235c:	438a      	bics	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fc94 	bl	8001c8c <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff fc8f 	bl	8001c8c <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e202      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237c:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d1f1      	bne.n	800236a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2208      	movs	r2, #8
 800238c:	4013      	ands	r3, r2
 800238e:	d036      	beq.n	80023fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d019      	beq.n	80023cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800239a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239c:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fc72 	bl	8001c8c <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7ff fc6d 	bl	8001c8c <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1e0      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d0f1      	beq.n	80023ae <HAL_RCC_OscConfig+0x242>
 80023ca:	e018      	b.n	80023fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	438a      	bics	r2, r1
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc58 	bl	8001c8c <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e2:	f7ff fc53 	bl	8001c8c <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1c6      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f1      	bne.n	80023e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d100      	bne.n	800240a <HAL_RCC_OscConfig+0x29e>
 8002408:	e0b4      	b.n	8002574 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	201f      	movs	r0, #31
 800240c:	183b      	adds	r3, r7, r0
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	055b      	lsls	r3, r3, #21
 800241a:	4013      	ands	r3, r2
 800241c:	d110      	bne.n	8002440 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	0549      	lsls	r1, r1, #21
 8002428:	430a      	orrs	r2, r1
 800242a:	61da      	str	r2, [r3, #28]
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	055b      	lsls	r3, r3, #21
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800243a:	183b      	adds	r3, r7, r0
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d11a      	bne.n	8002482 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x338>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_RCC_OscConfig+0x338>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0049      	lsls	r1, r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7ff fc17 	bl	8001c8c <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002464:	f7ff fc12 	bl	8001c8c <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e185      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_OscConfig+0x338>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10e      	bne.n	80024a8 <HAL_RCC_OscConfig+0x33c>
 800248a:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	4b02      	ldr	r3, [pc, #8]	; (8002498 <HAL_RCC_OscConfig+0x32c>)
 8002490:	2101      	movs	r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	621a      	str	r2, [r3, #32]
 8002496:	e035      	b.n	8002504 <HAL_RCC_OscConfig+0x398>
 8002498:	40021000 	.word	0x40021000
 800249c:	fffeffff 	.word	0xfffeffff
 80024a0:	fffbffff 	.word	0xfffbffff
 80024a4:	40007000 	.word	0x40007000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x35e>
 80024b0:	4bb6      	ldr	r3, [pc, #728]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	4bb5      	ldr	r3, [pc, #724]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	438a      	bics	r2, r1
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	4bb3      	ldr	r3, [pc, #716]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4bb2      	ldr	r3, [pc, #712]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024c2:	2104      	movs	r1, #4
 80024c4:	438a      	bics	r2, r1
 80024c6:	621a      	str	r2, [r3, #32]
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x398>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x380>
 80024d2:	4bae      	ldr	r3, [pc, #696]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024d4:	6a1a      	ldr	r2, [r3, #32]
 80024d6:	4bad      	ldr	r3, [pc, #692]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024d8:	2104      	movs	r1, #4
 80024da:	430a      	orrs	r2, r1
 80024dc:	621a      	str	r2, [r3, #32]
 80024de:	4bab      	ldr	r3, [pc, #684]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	4baa      	ldr	r3, [pc, #680]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	621a      	str	r2, [r3, #32]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0x398>
 80024ec:	4ba7      	ldr	r3, [pc, #668]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	4ba6      	ldr	r3, [pc, #664]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	438a      	bics	r2, r1
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	4ba4      	ldr	r3, [pc, #656]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	4ba3      	ldr	r3, [pc, #652]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80024fe:	2104      	movs	r1, #4
 8002500:	438a      	bics	r2, r1
 8002502:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d014      	beq.n	8002536 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7ff fbbe 	bl	8001c8c <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e009      	b.n	800252a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7ff fbb9 	bl	8001c8c <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	4a9b      	ldr	r2, [pc, #620]	; (8002790 <HAL_RCC_OscConfig+0x624>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e12b      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	4b98      	ldr	r3, [pc, #608]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x3aa>
 8002534:	e013      	b.n	800255e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fba9 	bl	8001c8c <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253e:	e009      	b.n	8002554 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff fba4 	bl	8001c8c <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	4a91      	ldr	r2, [pc, #580]	; (8002790 <HAL_RCC_OscConfig+0x624>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e116      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	4b8d      	ldr	r3, [pc, #564]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	2202      	movs	r2, #2
 800255a:	4013      	ands	r3, r2
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	4b87      	ldr	r3, [pc, #540]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800256e:	4989      	ldr	r1, [pc, #548]	; (8002794 <HAL_RCC_OscConfig+0x628>)
 8002570:	400a      	ands	r2, r1
 8002572:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	4013      	ands	r3, r2
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12a      	bne.n	80025dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258a:	4b80      	ldr	r3, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800258c:	2104      	movs	r1, #4
 800258e:	430a      	orrs	r2, r1
 8002590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002592:	4b7e      	ldr	r3, [pc, #504]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	4b7d      	ldr	r3, [pc, #500]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff fb75 	bl	8001c8c <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a8:	f7ff fb70 	bl	8001c8c <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0e3      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025ba:	4b74      	ldr	r3, [pc, #464]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f1      	beq.n	80025a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c4:	4b71      	ldr	r3, [pc, #452]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	22f8      	movs	r2, #248	; 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b6d      	ldr	r3, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
 80025da:	e034      	b.n	8002646 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	3305      	adds	r3, #5
 80025e2:	d111      	bne.n	8002608 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025e4:	4b69      	ldr	r3, [pc, #420]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e8:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025ea:	2104      	movs	r1, #4
 80025ec:	438a      	bics	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	22f8      	movs	r2, #248	; 0xf8
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	00da      	lsls	r2, r3, #3
 8002600:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
 8002606:	e01e      	b.n	8002646 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002608:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800260e:	2104      	movs	r1, #4
 8002610:	430a      	orrs	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002614:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002618:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800261a:	2101      	movs	r1, #1
 800261c:	438a      	bics	r2, r1
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff fb34 	bl	8001c8c <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800262a:	f7ff fb2f 	bl	8001c8c <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0a2      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d1f1      	bne.n	800262a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d100      	bne.n	8002650 <HAL_RCC_OscConfig+0x4e4>
 800264e:	e097      	b.n	8002780 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	220c      	movs	r2, #12
 8002656:	4013      	ands	r3, r2
 8002658:	2b08      	cmp	r3, #8
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x4f2>
 800265c:	e06b      	b.n	8002736 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d14c      	bne.n	8002700 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800266c:	494a      	ldr	r1, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x62c>)
 800266e:	400a      	ands	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fb0b 	bl	8001c8c <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff fb06 	bl	8001c8c <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e079      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	049b      	lsls	r3, r3, #18
 8002696:	4013      	ands	r3, r2
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	220f      	movs	r2, #15
 80026a0:	4393      	bics	r3, r2
 80026a2:	0019      	movs	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026aa:	430a      	orrs	r2, r1
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_RCC_OscConfig+0x630>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	431a      	orrs	r2, r3
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	0449      	lsls	r1, r1, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff fad9 	bl	8001c8c <HAL_GetTick>
 80026da:	0003      	movs	r3, r0
 80026dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fad4 	bl	8001c8c <HAL_GetTick>
 80026e4:	0002      	movs	r2, r0
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e047      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_OscConfig+0x620>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	049b      	lsls	r3, r3, #18
 80026fa:	4013      	ands	r3, r2
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x574>
 80026fe:	e03f      	b.n	8002780 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002706:	4924      	ldr	r1, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x62c>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fabe 	bl	8001c8c <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff fab9 	bl	8001c8c <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e02c      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	4013      	ands	r3, r2
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x5aa>
 8002734:	e024      	b.n	8002780 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01f      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x620>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x620>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	025b      	lsls	r3, r3, #9
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	429a      	cmp	r2, r3
 800275c:	d10e      	bne.n	800277c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	220f      	movs	r2, #15
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	23f0      	movs	r3, #240	; 0xf0
 8002770:	039b      	lsls	r3, r3, #14
 8002772:	401a      	ands	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b008      	add	sp, #32
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	40021000 	.word	0x40021000
 8002790:	00001388 	.word	0x00001388
 8002794:	efffffff 	.word	0xefffffff
 8002798:	feffffff 	.word	0xfeffffff
 800279c:	ffc2ffff 	.word	0xffc2ffff

080027a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b3      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d911      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4393      	bics	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	4b55      	ldr	r3, [pc, #340]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e09a      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d015      	beq.n	800281c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d006      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002800:	21e0      	movs	r1, #224	; 0xe0
 8002802:	00c9      	lsls	r1, r1, #3
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	22f0      	movs	r2, #240	; 0xf0
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	029b      	lsls	r3, r3, #10
 8002836:	4013      	ands	r3, r2
 8002838:	d114      	bne.n	8002864 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06e      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	049b      	lsls	r3, r3, #18
 800284e:	4013      	ands	r3, r2
 8002850:	d108      	bne.n	8002864 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e062      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e05b      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff fa08 	bl	8001c8c <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7ff fa03 	bl	8001c8c <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_RCC_ClockConfig+0x18c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e042      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	220c      	movs	r2, #12
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d211      	bcs.n	80028da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4393      	bics	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_RCC_ClockConfig+0x184>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e020      	b.n	800291c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_ClockConfig+0x190>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028f8:	f000 f820 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fc:	0001      	movs	r1, r0
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x188>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	220f      	movs	r2, #15
 8002906:	4013      	ands	r3, r2
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x194>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	000a      	movs	r2, r1
 800290e:	40da      	lsrs	r2, r3
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x198>)
 8002912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff f973 	bl	8001c00 <HAL_InitTick>
  
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
 800292c:	00001388 	.word	0x00001388
 8002930:	fffff8ff 	.word	0xfffff8ff
 8002934:	08005910 	.word	0x08005910
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b08f      	sub	sp, #60	; 0x3c
 8002940:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002942:	2314      	movs	r3, #20
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002948:	ca13      	ldmia	r2!, {r0, r1, r4}
 800294a:	c313      	stmia	r3!, {r0, r1, r4}
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002954:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002956:	c313      	stmia	r3!, {r0, r1, r4}
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	2300      	movs	r3, #0
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	220c      	movs	r2, #12
 800297a:	4013      	ands	r3, r2
 800297c:	2b04      	cmp	r3, #4
 800297e:	d002      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x4a>
 8002980:	2b08      	cmp	r3, #8
 8002982:	d003      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x50>
 8002984:	e02d      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800298a:	e02d      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	220f      	movs	r2, #15
 8002992:	4013      	ands	r3, r2
 8002994:	2214      	movs	r2, #20
 8002996:	18ba      	adds	r2, r7, r2
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	220f      	movs	r2, #15
 80029a2:	4013      	ands	r3, r2
 80029a4:	1d3a      	adds	r2, r7, #4
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b6:	4812      	ldr	r0, [pc, #72]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b8:	f7fd fbb8 	bl	800012c <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	001a      	movs	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	4353      	muls	r3, r2
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
 80029c6:	e009      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ca:	000a      	movs	r2, r1
 80029cc:	0152      	lsls	r2, r2, #5
 80029ce:	1a52      	subs	r2, r2, r1
 80029d0:	0193      	lsls	r3, r2, #6
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	185b      	adds	r3, r3, r1
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b00f      	add	sp, #60	; 0x3c
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	080058e0 	.word	0x080058e0
 80029f8:	080058f0 	.word	0x080058f0
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	20000008 	.word	0x20000008

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a1c:	f7ff fff2 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a20:	0001      	movs	r1, r0
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	2207      	movs	r2, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	40d9      	lsrs	r1, r3
 8002a32:	000b      	movs	r3, r1
}    
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08005920 	.word	0x08005920

08002a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0a8      	b.n	8002ba8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	2382      	movs	r3, #130	; 0x82
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d009      	beq.n	8002a7e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
 8002a70:	e005      	b.n	8002a7e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	225d      	movs	r2, #93	; 0x5d
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	225c      	movs	r2, #92	; 0x5c
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fe ff18 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	225d      	movs	r2, #93	; 0x5d
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	23e0      	movs	r3, #224	; 0xe0
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d902      	bls.n	8002aca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e002      	b.n	8002ad0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	23f0      	movs	r3, #240	; 0xf0
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d008      	beq.n	8002aee <HAL_SPI_Init+0xaa>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	23e0      	movs	r3, #224	; 0xe0
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d002      	beq.n	8002aee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2382      	movs	r3, #130	; 0x82
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	401a      	ands	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	2384      	movs	r3, #132	; 0x84
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2102      	movs	r1, #2
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2101      	movs	r1, #1
 8002b14:	400b      	ands	r3, r1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6999      	ldr	r1, [r3, #24]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	400b      	ands	r3, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2138      	movs	r1, #56	; 0x38
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	400b      	ands	r3, r1
 8002b36:	431a      	orrs	r2, r3
 8002b38:	0011      	movs	r1, r2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	2204      	movs	r2, #4
 8002b54:	401a      	ands	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	2108      	movs	r1, #8
 8002b66:	400b      	ands	r3, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	23f0      	movs	r3, #240	; 0xf0
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	400b      	ands	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	0011      	movs	r1, r2
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	015b      	lsls	r3, r3, #5
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <HAL_SPI_Init+0x16c>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	225d      	movs	r2, #93	; 0x5d
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	fffff7ff 	.word	0xfffff7ff

08002bb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc4:	231f      	movs	r3, #31
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	225c      	movs	r2, #92	; 0x5c
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Transmit+0x26>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e140      	b.n	8002e5c <HAL_SPI_Transmit+0x2a8>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	225c      	movs	r2, #92	; 0x5c
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be2:	f7ff f853 	bl	8001c8c <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002bea:	2316      	movs	r3, #22
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	1dba      	adds	r2, r7, #6
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	225d      	movs	r2, #93	; 0x5d
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d004      	beq.n	8002c0a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c00:	231f      	movs	r3, #31
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c08:	e11d      	b.n	8002e46 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_SPI_Transmit+0x64>
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c18:	231f      	movs	r3, #31
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c20:	e111      	b.n	8002e46 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	225d      	movs	r2, #93	; 0x5d
 8002c26:	2103      	movs	r1, #3
 8002c28:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1dba      	adds	r2, r7, #6
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1dba      	adds	r2, r7, #6
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2244      	movs	r2, #68	; 0x44
 8002c50:	2100      	movs	r1, #0
 8002c52:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2246      	movs	r2, #70	; 0x46
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d110      	bne.n	8002c96 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	438a      	bics	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	01c9      	lsls	r1, r1, #7
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d007      	beq.n	8002cb4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	23e0      	movs	r3, #224	; 0xe0
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d94e      	bls.n	8002d5e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_SPI_Transmit+0x11e>
 8002cc8:	2316      	movs	r3, #22
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d13f      	bne.n	8002d52 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf6:	e02c      	b.n	8002d52 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d112      	bne.n	8002d2c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2a:	e012      	b.n	8002d52 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2c:	f7fe ffae 	bl	8001c8c <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d802      	bhi.n	8002d42 <HAL_SPI_Transmit+0x18e>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Transmit+0x194>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002d48:	231f      	movs	r3, #31
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d50:	e079      	b.n	8002e46 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1cd      	bne.n	8002cf8 <HAL_SPI_Transmit+0x144>
 8002d5c:	e04f      	b.n	8002dfe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_SPI_Transmit+0x1bc>
 8002d66:	2316      	movs	r3, #22
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d141      	bne.n	8002df4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002d96:	e02d      	b.n	8002df4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d113      	bne.n	8002dce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dcc:	e012      	b.n	8002df4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dce:	f7fe ff5d 	bl	8001c8c <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d802      	bhi.n	8002de4 <HAL_SPI_Transmit+0x230>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_SPI_Transmit+0x236>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002dea:	231f      	movs	r3, #31
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2203      	movs	r2, #3
 8002df0:	701a      	strb	r2, [r3, #0]
          goto error;
 8002df2:	e028      	b.n	8002e46 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1cc      	bne.n	8002d98 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fcd9 	bl	80037bc <SPI_EndRxTxTransaction>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e000      	b.n	8002e46 <HAL_SPI_Transmit+0x292>
  }

error:
 8002e44:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	225d      	movs	r2, #93	; 0x5d
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	225c      	movs	r2, #92	; 0x5c
 8002e52:	2100      	movs	r1, #0
 8002e54:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e56:	231f      	movs	r3, #31
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781b      	ldrb	r3, [r3, #0]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b008      	add	sp, #32
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e74:	2317      	movs	r3, #23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	2382      	movs	r3, #130	; 0x82
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d113      	bne.n	8002eb0 <HAL_SPI_Receive+0x4c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	225d      	movs	r2, #93	; 0x5d
 8002e94:	2104      	movs	r1, #4
 8002e96:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e98:	1dbb      	adds	r3, r7, #6
 8002e9a:	881c      	ldrh	r4, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	0023      	movs	r3, r4
 8002ea8:	f000 f928 	bl	80030fc <HAL_SPI_TransmitReceive>
 8002eac:	0003      	movs	r3, r0
 8002eae:	e11c      	b.n	80030ea <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	225c      	movs	r2, #92	; 0x5c
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_SPI_Receive+0x5a>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e115      	b.n	80030ea <HAL_SPI_Receive+0x286>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	225c      	movs	r2, #92	; 0x5c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec6:	f7fe fee1 	bl	8001c8c <HAL_GetTick>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	225d      	movs	r2, #93	; 0x5d
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d004      	beq.n	8002ee4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002eda:	2317      	movs	r3, #23
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2202      	movs	r2, #2
 8002ee0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ee2:	e0f7      	b.n	80030d4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_SPI_Receive+0x8e>
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002ef2:	2317      	movs	r3, #23
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002efa:	e0eb      	b.n	80030d4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	225d      	movs	r2, #93	; 0x5d
 8002f00:	2104      	movs	r1, #4
 8002f02:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1dba      	adds	r2, r7, #6
 8002f14:	2144      	movs	r1, #68	; 0x44
 8002f16:	8812      	ldrh	r2, [r2, #0]
 8002f18:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1dba      	adds	r2, r7, #6
 8002f1e:	2146      	movs	r1, #70	; 0x46
 8002f20:	8812      	ldrh	r2, [r2, #0]
 8002f22:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	23e0      	movs	r3, #224	; 0xe0
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d908      	bls.n	8002f60 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4966      	ldr	r1, [pc, #408]	; (80030f4 <HAL_SPI_Receive+0x290>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	e008      	b.n	8002f72 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0149      	lsls	r1, r1, #5
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d10f      	bne.n	8002f9e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4957      	ldr	r1, [pc, #348]	; (80030f8 <HAL_SPI_Receive+0x294>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2240      	movs	r2, #64	; 0x40
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d007      	beq.n	8002fbc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	23e0      	movs	r3, #224	; 0xe0
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d900      	bls.n	8002fca <HAL_SPI_Receive+0x166>
 8002fc8:	e069      	b.n	800309e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fca:	e031      	b.n	8003030 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d117      	bne.n	800300a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2246      	movs	r2, #70	; 0x46
 8002ffa:	5a9b      	ldrh	r3, [r3, r2]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b299      	uxth	r1, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2246      	movs	r2, #70	; 0x46
 8003006:	5299      	strh	r1, [r3, r2]
 8003008:	e012      	b.n	8003030 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800300a:	f7fe fe3f 	bl	8001c8c <HAL_GetTick>
 800300e:	0002      	movs	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d802      	bhi.n	8003020 <HAL_SPI_Receive+0x1bc>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Receive+0x1c2>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003026:	2317      	movs	r3, #23
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2203      	movs	r2, #3
 800302c:	701a      	strb	r2, [r3, #0]
          goto error;
 800302e:	e051      	b.n	80030d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2246      	movs	r2, #70	; 0x46
 8003034:	5a9b      	ldrh	r3, [r3, r2]
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1c7      	bne.n	8002fcc <HAL_SPI_Receive+0x168>
 800303c:	e035      	b.n	80030aa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	b292      	uxth	r2, r2
 8003058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2246      	movs	r2, #70	; 0x46
 8003068:	5a9b      	ldrh	r3, [r3, r2]
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b299      	uxth	r1, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2246      	movs	r2, #70	; 0x46
 8003074:	5299      	strh	r1, [r3, r2]
 8003076:	e012      	b.n	800309e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003078:	f7fe fe08 	bl	8001c8c <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d802      	bhi.n	800308e <HAL_SPI_Receive+0x22a>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_SPI_Receive+0x230>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003094:	2317      	movs	r3, #23
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2203      	movs	r2, #3
 800309a:	701a      	strb	r2, [r3, #0]
          goto error;
 800309c:	e01a      	b.n	80030d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2246      	movs	r2, #70	; 0x46
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1c9      	bne.n	800303e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fb25 	bl	8003700 <SPI_EndRxTransaction>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80030c8:	2317      	movs	r3, #23
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e000      	b.n	80030d4 <HAL_SPI_Receive+0x270>
  }

error :
 80030d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	225d      	movs	r2, #93	; 0x5d
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	225c      	movs	r2, #92	; 0x5c
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030e4:	2317      	movs	r3, #23
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b007      	add	sp, #28
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	ffffefff 	.word	0xffffefff
 80030f8:	ffffbfff 	.word	0xffffbfff

080030fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	001a      	movs	r2, r3
 800310a:	1cbb      	adds	r3, r7, #2
 800310c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800310e:	2301      	movs	r3, #1
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003112:	2323      	movs	r3, #35	; 0x23
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	225c      	movs	r2, #92	; 0x5c
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x2c>
 8003124:	2302      	movs	r3, #2
 8003126:	e1b5      	b.n	8003494 <HAL_SPI_TransmitReceive+0x398>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	225c      	movs	r2, #92	; 0x5c
 800312c:	2101      	movs	r1, #1
 800312e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003130:	f7fe fdac 	bl	8001c8c <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003138:	201b      	movs	r0, #27
 800313a:	183b      	adds	r3, r7, r0
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	215d      	movs	r1, #93	; 0x5d
 8003140:	5c52      	ldrb	r2, [r2, r1]
 8003142:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800314a:	2312      	movs	r3, #18
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	1cba      	adds	r2, r7, #2
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003154:	183b      	adds	r3, r7, r0
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d011      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x84>
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	2382      	movs	r3, #130	; 0x82
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	429a      	cmp	r2, r3
 8003164:	d107      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x7a>
 800316e:	183b      	adds	r3, r7, r0
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d004      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003176:	2323      	movs	r3, #35	; 0x23
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
    goto error;
 800317e:	e17e      	b.n	800347e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x98>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x98>
 800318c:	1cbb      	adds	r3, r7, #2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003194:	2323      	movs	r3, #35	; 0x23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    goto error;
 800319c:	e16f      	b.n	800347e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	225d      	movs	r2, #93	; 0x5d
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d003      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	225d      	movs	r2, #93	; 0x5d
 80031ae:	2105      	movs	r1, #5
 80031b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1cba      	adds	r2, r7, #2
 80031c2:	2146      	movs	r1, #70	; 0x46
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1cba      	adds	r2, r7, #2
 80031cc:	2144      	movs	r1, #68	; 0x44
 80031ce:	8812      	ldrh	r2, [r2, #0]
 80031d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1cba      	adds	r2, r7, #2
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1cba      	adds	r2, r7, #2
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	23e0      	movs	r3, #224	; 0xe0
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d908      	bls.n	8003212 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	49a4      	ldr	r1, [pc, #656]	; (800349c <HAL_SPI_TransmitReceive+0x3a0>)
 800320c:	400a      	ands	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	e008      	b.n	8003224 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0149      	lsls	r1, r1, #5
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	4013      	ands	r3, r2
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d007      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2140      	movs	r1, #64	; 0x40
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	23e0      	movs	r3, #224	; 0xe0
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	429a      	cmp	r2, r3
 800324c:	d800      	bhi.n	8003250 <HAL_SPI_TransmitReceive+0x154>
 800324e:	e07f      	b.n	8003350 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x168>
 8003258:	2312      	movs	r3, #18
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d000      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x168>
 8003262:	e069      	b.n	8003338 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003288:	e056      	b.n	8003338 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2202      	movs	r2, #2
 8003292:	4013      	ands	r3, r2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d11b      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x1d4>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x1d4>
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d113      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d11c      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x21c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2246      	movs	r2, #70	; 0x46
 80032e2:	5a9b      	ldrh	r3, [r3, r2]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	b292      	uxth	r2, r2
 80032f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2246      	movs	r2, #70	; 0x46
 8003306:	5a9b      	ldrh	r3, [r3, r2]
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b299      	uxth	r1, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2246      	movs	r2, #70	; 0x46
 8003312:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003318:	f7fe fcb8 	bl	8001c8c <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	429a      	cmp	r2, r3
 8003326:	d807      	bhi.n	8003338 <HAL_SPI_TransmitReceive+0x23c>
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	3301      	adds	r3, #1
 800332c:	d004      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800332e:	2323      	movs	r3, #35	; 0x23
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2203      	movs	r2, #3
 8003334:	701a      	strb	r2, [r3, #0]
        goto error;
 8003336:	e0a2      	b.n	800347e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1a3      	bne.n	800328a <HAL_SPI_TransmitReceive+0x18e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2246      	movs	r2, #70	; 0x46
 8003346:	5a9b      	ldrh	r3, [r3, r2]
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d19d      	bne.n	800328a <HAL_SPI_TransmitReceive+0x18e>
 800334e:	e085      	b.n	800345c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x268>
 8003358:	2312      	movs	r3, #18
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d000      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x268>
 8003362:	e070      	b.n	8003446 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338a:	e05c      	b.n	8003446 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2202      	movs	r2, #2
 8003394:	4013      	ands	r3, r2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d11c      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x2d8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x2d8>
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d114      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d11e      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x324>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2246      	movs	r2, #70	; 0x46
 80033e6:	5a9b      	ldrh	r3, [r3, r2]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	001a      	movs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2246      	movs	r2, #70	; 0x46
 800340e:	5a9b      	ldrh	r3, [r3, r2]
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b299      	uxth	r1, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2246      	movs	r2, #70	; 0x46
 800341a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003420:	f7fe fc34 	bl	8001c8c <HAL_GetTick>
 8003424:	0002      	movs	r2, r0
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342c:	429a      	cmp	r2, r3
 800342e:	d802      	bhi.n	8003436 <HAL_SPI_TransmitReceive+0x33a>
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	3301      	adds	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_SPI_TransmitReceive+0x340>
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800343c:	2323      	movs	r3, #35	; 0x23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2203      	movs	r2, #3
 8003442:	701a      	strb	r2, [r3, #0]
        goto error;
 8003444:	e01b      	b.n	800347e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d19d      	bne.n	800338c <HAL_SPI_TransmitReceive+0x290>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2246      	movs	r2, #70	; 0x46
 8003454:	5a9b      	ldrh	r3, [r3, r2]
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d197      	bne.n	800338c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f9aa 	bl	80037bc <SPI_EndRxTxTransaction>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d007      	beq.n	800347c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800346c:	2323      	movs	r3, #35	; 0x23
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	661a      	str	r2, [r3, #96]	; 0x60
 800347a:	e000      	b.n	800347e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800347c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	225d      	movs	r2, #93	; 0x5d
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	225c      	movs	r2, #92	; 0x5c
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800348e:	2323      	movs	r3, #35	; 0x23
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b00a      	add	sp, #40	; 0x28
 800349a:	bd80      	pop	{r7, pc}
 800349c:	ffffefff 	.word	0xffffefff

080034a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b0:	f7fe fbec 	bl	8001c8c <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c0:	f7fe fbe4 	bl	8001c8c <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	015b      	lsls	r3, r3, #5
 80034ce:	0d1b      	lsrs	r3, r3, #20
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	4353      	muls	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034d6:	e058      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	d055      	beq.n	800358a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034de:	f7fe fbd5 	bl	8001c8c <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d902      	bls.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d142      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	21e0      	movs	r1, #224	; 0xe0
 8003500:	438a      	bics	r2, r1
 8003502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	2382      	movs	r3, #130	; 0x82
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	429a      	cmp	r2, r3
 800350e:	d113      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	429a      	cmp	r2, r3
 800351a:	d005      	beq.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	429a      	cmp	r2, r3
 8003542:	d110      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	491a      	ldr	r1, [pc, #104]	; (80035b8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003550:	400a      	ands	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0189      	lsls	r1, r1, #6
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	225d      	movs	r2, #93	; 0x5d
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	225c      	movs	r2, #92	; 0x5c
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e017      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3b01      	subs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	425a      	negs	r2, r3
 800359a:	4153      	adcs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	001a      	movs	r2, r3
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d197      	bne.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b008      	add	sp, #32
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20000008 	.word	0x20000008
 80035b8:	ffffdfff 	.word	0xffffdfff

080035bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035ca:	2317      	movs	r3, #23
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035d2:	f7fe fb5b 	bl	8001c8c <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035e2:	f7fe fb53 	bl	8001c8c <HAL_GetTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	0013      	movs	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	00da      	lsls	r2, r3, #3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	0d1b      	lsrs	r3, r3, #20
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	4353      	muls	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003608:	e068      	b.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	429a      	cmp	r2, r3
 8003612:	d10a      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	2117      	movs	r1, #23
 8003622:	187b      	adds	r3, r7, r1
 8003624:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003626:	187b      	adds	r3, r7, r1
 8003628:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	d055      	beq.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003630:	f7fe fb2c 	bl	8001c8c <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	429a      	cmp	r2, r3
 800363e:	d902      	bls.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d142      	bne.n	80036cc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	21e0      	movs	r1, #224	; 0xe0
 8003652:	438a      	bics	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	2382      	movs	r3, #130	; 0x82
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	429a      	cmp	r2, r3
 8003660:	d113      	bne.n	800368a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	429a      	cmp	r2, r3
 800366c:	d005      	beq.n	800367a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	429a      	cmp	r2, r3
 8003678:	d107      	bne.n	800368a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	438a      	bics	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	429a      	cmp	r2, r3
 8003694:	d110      	bne.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <SPI_WaitFifoStateUntilTimeout+0x140>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	0189      	lsls	r1, r1, #6
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	225d      	movs	r2, #93	; 0x5d
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	225c      	movs	r2, #92	; 0x5c
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e010      	b.n	80036ee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3b01      	subs	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d18e      	bne.n	800360a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b00a      	add	sp, #40	; 0x28
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000008 	.word	0x20000008
 80036fc:	ffffdfff 	.word	0xffffdfff

08003700 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	2382      	movs	r3, #130	; 0x82
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	429a      	cmp	r2, r3
 8003716:	d113      	bne.n	8003740 <SPI_EndRxTransaction+0x40>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	429a      	cmp	r2, r3
 8003722:	d005      	beq.n	8003730 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	438a      	bics	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	0013      	movs	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	f7ff fea7 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d007      	beq.n	8003766 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	2220      	movs	r2, #32
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e026      	b.n	80037b4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	2382      	movs	r3, #130	; 0x82
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	429a      	cmp	r2, r3
 8003770:	d11f      	bne.n	80037b2 <SPI_EndRxTransaction+0xb2>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	429a      	cmp	r2, r3
 800377c:	d005      	beq.n	800378a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	429a      	cmp	r2, r3
 8003788:	d113      	bne.n	80037b2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	00d9      	lsls	r1, r3, #3
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	0013      	movs	r3, r2
 8003798:	2200      	movs	r2, #0
 800379a:	f7ff ff0f 	bl	80035bc <SPI_WaitFifoStateUntilTimeout>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d007      	beq.n	80037b2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	2220      	movs	r2, #32
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e000      	b.n	80037b4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}

080037bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	23c0      	movs	r3, #192	; 0xc0
 80037cc:	0159      	lsls	r1, r3, #5
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	0013      	movs	r3, r2
 80037d6:	2200      	movs	r2, #0
 80037d8:	f7ff fef0 	bl	80035bc <SPI_WaitFifoStateUntilTimeout>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d007      	beq.n	80037f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e4:	2220      	movs	r2, #32
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e027      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	0013      	movs	r3, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	f7ff fe4f 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d007      	beq.n	8003816 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	2220      	movs	r2, #32
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e014      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	23c0      	movs	r3, #192	; 0xc0
 800381a:	00d9      	lsls	r1, r3, #3
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	0013      	movs	r3, r2
 8003824:	2200      	movs	r2, #0
 8003826:	f7ff fec9 	bl	80035bc <SPI_WaitFifoStateUntilTimeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d007      	beq.n	800383e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	2220      	movs	r2, #32
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e000      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e044      	b.n	80038e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2274      	movs	r2, #116	; 0x74
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f7fe f8a1 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f8da 	bl	8003a44 <UART_SetConfig>
 8003890:	0003      	movs	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e024      	b.n	80038e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 fa0d 	bl	8003cc4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	490d      	ldr	r1, [pc, #52]	; (80038ec <HAL_UART_Init+0xa4>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2108      	movs	r1, #8
 80038c6:	438a      	bics	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 faa5 	bl	8003e2c <UART_CheckIdleState>
 80038e2:	0003      	movs	r3, r0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	fffff7ff 	.word	0xfffff7ff

080038f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	1dbb      	adds	r3, r7, #6
 80038fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003904:	2b20      	cmp	r3, #32
 8003906:	d000      	beq.n	800390a <HAL_UART_Transmit+0x1a>
 8003908:	e096      	b.n	8003a38 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_UART_Transmit+0x28>
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e08e      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	015b      	lsls	r3, r3, #5
 8003924:	429a      	cmp	r2, r3
 8003926:	d109      	bne.n	800393c <HAL_UART_Transmit+0x4c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e07e      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2274      	movs	r2, #116	; 0x74
 8003940:	5c9b      	ldrb	r3, [r3, r2]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_UART_Transmit+0x5a>
 8003946:	2302      	movs	r3, #2
 8003948:	e077      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2274      	movs	r2, #116	; 0x74
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	2100      	movs	r1, #0
 8003958:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2221      	movs	r2, #33	; 0x21
 800395e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003960:	f7fe f994 	bl	8001c8c <HAL_GetTick>
 8003964:	0003      	movs	r3, r0
 8003966:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1dba      	adds	r2, r7, #6
 800396c:	2150      	movs	r1, #80	; 0x50
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1dba      	adds	r2, r7, #6
 8003976:	2152      	movs	r1, #82	; 0x52
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	015b      	lsls	r3, r3, #5
 8003984:	429a      	cmp	r2, r3
 8003986:	d108      	bne.n	800399a <HAL_UART_Transmit+0xaa>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	e003      	b.n	80039a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2274      	movs	r2, #116	; 0x74
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80039aa:	e02d      	b.n	8003a08 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	0013      	movs	r3, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	f000 fa7f 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e039      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	05d2      	lsls	r2, r2, #23
 80039d6:	0dd2      	lsrs	r2, r2, #23
 80039d8:	b292      	uxth	r2, r2
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	3302      	adds	r3, #2
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e008      	b.n	80039f6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b292      	uxth	r2, r2
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2252      	movs	r2, #82	; 0x52
 80039fa:	5a9b      	ldrh	r3, [r3, r2]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b299      	uxth	r1, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2252      	movs	r2, #82	; 0x52
 8003a06:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2252      	movs	r2, #82	; 0x52
 8003a0c:	5a9b      	ldrh	r3, [r3, r2]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1cb      	bne.n	80039ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	f000 fa4b 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e005      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b008      	add	sp, #32
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a4c:	231e      	movs	r3, #30
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a8d      	ldr	r2, [pc, #564]	; (8003ca8 <UART_SetConfig+0x264>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a88      	ldr	r2, [pc, #544]	; (8003cac <UART_SetConfig+0x268>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a7f      	ldr	r2, [pc, #508]	; (8003cb0 <UART_SetConfig+0x26c>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7b      	ldr	r2, [pc, #492]	; (8003cb4 <UART_SetConfig+0x270>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d127      	bne.n	8003b1a <UART_SetConfig+0xd6>
 8003aca:	4b7b      	ldr	r3, [pc, #492]	; (8003cb8 <UART_SetConfig+0x274>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	2203      	movs	r2, #3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d00d      	beq.n	8003af2 <UART_SetConfig+0xae>
 8003ad6:	d81b      	bhi.n	8003b10 <UART_SetConfig+0xcc>
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d014      	beq.n	8003b06 <UART_SetConfig+0xc2>
 8003adc:	d818      	bhi.n	8003b10 <UART_SetConfig+0xcc>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <UART_SetConfig+0xa4>
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00a      	beq.n	8003afc <UART_SetConfig+0xb8>
 8003ae6:	e013      	b.n	8003b10 <UART_SetConfig+0xcc>
 8003ae8:	231f      	movs	r3, #31
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	e021      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003af2:	231f      	movs	r3, #31
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e01c      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003afc:	231f      	movs	r3, #31
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	2204      	movs	r2, #4
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e017      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003b06:	231f      	movs	r3, #31
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e012      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003b10:	231f      	movs	r3, #31
 8003b12:	18fb      	adds	r3, r7, r3
 8003b14:	2210      	movs	r2, #16
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e00d      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <UART_SetConfig+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d104      	bne.n	8003b2e <UART_SetConfig+0xea>
 8003b24:	231f      	movs	r3, #31
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e003      	b.n	8003b36 <UART_SetConfig+0xf2>
 8003b2e:	231f      	movs	r3, #31
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2210      	movs	r2, #16
 8003b34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d15d      	bne.n	8003bfe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003b42:	231f      	movs	r3, #31
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d015      	beq.n	8003b78 <UART_SetConfig+0x134>
 8003b4c:	dc18      	bgt.n	8003b80 <UART_SetConfig+0x13c>
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00d      	beq.n	8003b6e <UART_SetConfig+0x12a>
 8003b52:	dc15      	bgt.n	8003b80 <UART_SetConfig+0x13c>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <UART_SetConfig+0x11a>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d005      	beq.n	8003b68 <UART_SetConfig+0x124>
 8003b5c:	e010      	b.n	8003b80 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5e:	f7fe ff5b 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003b62:	0003      	movs	r3, r0
 8003b64:	61bb      	str	r3, [r7, #24]
        break;
 8003b66:	e012      	b.n	8003b8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <UART_SetConfig+0x27c>)
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e00f      	b.n	8003b8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe fee5 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003b72:	0003      	movs	r3, r0
 8003b74:	61bb      	str	r3, [r7, #24]
        break;
 8003b76:	e00a      	b.n	8003b8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	61bb      	str	r3, [r7, #24]
        break;
 8003b7e:	e006      	b.n	8003b8e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b84:	231e      	movs	r3, #30
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
        break;
 8003b8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d100      	bne.n	8003b96 <UART_SetConfig+0x152>
 8003b94:	e07b      	b.n	8003c8e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	18d2      	adds	r2, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	0010      	movs	r0, r2
 8003baa:	f7fc fabf 	bl	800012c <__udivsi3>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	d91c      	bls.n	8003bf4 <UART_SetConfig+0x1b0>
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	025b      	lsls	r3, r3, #9
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d217      	bcs.n	8003bf4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	200e      	movs	r0, #14
 8003bca:	183b      	adds	r3, r7, r0
 8003bcc:	210f      	movs	r1, #15
 8003bce:	438a      	bics	r2, r1
 8003bd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2207      	movs	r2, #7
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	183a      	adds	r2, r7, r0
 8003be2:	8812      	ldrh	r2, [r2, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	183a      	adds	r2, r7, r0
 8003bee:	8812      	ldrh	r2, [r2, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e04c      	b.n	8003c8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf4:	231e      	movs	r3, #30
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e047      	b.n	8003c8e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d015      	beq.n	8003c34 <UART_SetConfig+0x1f0>
 8003c08:	dc18      	bgt.n	8003c3c <UART_SetConfig+0x1f8>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d00d      	beq.n	8003c2a <UART_SetConfig+0x1e6>
 8003c0e:	dc15      	bgt.n	8003c3c <UART_SetConfig+0x1f8>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <UART_SetConfig+0x1d6>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d005      	beq.n	8003c24 <UART_SetConfig+0x1e0>
 8003c18:	e010      	b.n	8003c3c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fe fefd 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	61bb      	str	r3, [r7, #24]
        break;
 8003c22:	e012      	b.n	8003c4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <UART_SetConfig+0x27c>)
 8003c26:	61bb      	str	r3, [r7, #24]
        break;
 8003c28:	e00f      	b.n	8003c4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fe fe87 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	61bb      	str	r3, [r7, #24]
        break;
 8003c32:	e00a      	b.n	8003c4a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	61bb      	str	r3, [r7, #24]
        break;
 8003c3a:	e006      	b.n	8003c4a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c40:	231e      	movs	r3, #30
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
        break;
 8003c48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01e      	beq.n	8003c8e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085a      	lsrs	r2, r3, #1
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	18d2      	adds	r2, r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0019      	movs	r1, r3
 8003c60:	0010      	movs	r0, r2
 8003c62:	f7fc fa63 	bl	800012c <__udivsi3>
 8003c66:	0003      	movs	r3, r0
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d909      	bls.n	8003c86 <UART_SetConfig+0x242>
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	025b      	lsls	r3, r3, #9
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d204      	bcs.n	8003c86 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e003      	b.n	8003c8e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c86:	231e      	movs	r3, #30
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c9a:	231e      	movs	r3, #30
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b008      	add	sp, #32
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	ffff69f3 	.word	0xffff69f3
 8003cac:	ffffcfff 	.word	0xffffcfff
 8003cb0:	fffff4ff 	.word	0xfffff4ff
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40004400 	.word	0x40004400
 8003cc0:	007a1200 	.word	0x007a1200

08003cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <UART_AdvFeatureConfig+0x144>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4a43      	ldr	r2, [pc, #268]	; (8003e0c <UART_AdvFeatureConfig+0x148>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2204      	movs	r2, #4
 8003d16:	4013      	ands	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <UART_AdvFeatureConfig+0x14c>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2208      	movs	r2, #8
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <UART_AdvFeatureConfig+0x150>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2210      	movs	r2, #16
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a2c      	ldr	r2, [pc, #176]	; (8003e18 <UART_AdvFeatureConfig+0x154>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <UART_AdvFeatureConfig+0x158>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d01d      	beq.n	8003dde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <UART_AdvFeatureConfig+0x15c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	035b      	lsls	r3, r3, #13
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10b      	bne.n	8003dde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <UART_AdvFeatureConfig+0x160>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	4013      	ands	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <UART_AdvFeatureConfig+0x164>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fffdffff 	.word	0xfffdffff
 8003e0c:	fffeffff 	.word	0xfffeffff
 8003e10:	fffbffff 	.word	0xfffbffff
 8003e14:	ffff7fff 	.word	0xffff7fff
 8003e18:	ffffefff 	.word	0xffffefff
 8003e1c:	ffffdfff 	.word	0xffffdfff
 8003e20:	ffefffff 	.word	0xffefffff
 8003e24:	ff9fffff 	.word	0xff9fffff
 8003e28:	fff7ffff 	.word	0xfff7ffff

08003e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e3c:	f7fd ff26 	bl	8001c8c <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d10c      	bne.n	8003e6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	0391      	lsls	r1, r2, #14
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <UART_CheckIdleState+0x8c>)
 8003e5c:	9200      	str	r2, [sp, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f000 f82c 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d001      	beq.n	8003e6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e021      	b.n	8003eb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d10c      	bne.n	8003e94 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	03d1      	lsls	r1, r2, #15
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <UART_CheckIdleState+0x8c>)
 8003e84:	9200      	str	r2, [sp, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f000 f818 	bl	8003ebc <UART_WaitOnFlagUntilTimeout>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e00d      	b.n	8003eb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2274      	movs	r2, #116	; 0x74
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	01ffffff 	.word	0x01ffffff

08003ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b094      	sub	sp, #80	; 0x50
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	1dfb      	adds	r3, r7, #7
 8003eca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ecc:	e0a3      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	d100      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ed4:	e09f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fd fed9 	bl	8001c8c <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d13d      	bne.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	494c      	ldr	r1, [pc, #304]	; (8004040 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
 8003f28:	2301      	movs	r3, #1
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2274      	movs	r2, #116	; 0x74
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e067      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	4013      	ands	r3, r2
 8003f72:	d050      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	401a      	ands	r2, r3
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d146      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2280      	movs	r2, #128	; 0x80
 8003f8e:	0112      	lsls	r2, r2, #4
 8003f90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	613b      	str	r3, [r7, #16]
  return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4923      	ldr	r1, [pc, #140]	; (8004040 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fce:	2301      	movs	r3, #1
 8003fd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f383 8810 	msr	PRIMASK, r3
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	2120      	movs	r1, #32
 8004008:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2274      	movs	r2, #116	; 0x74
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e010      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	425a      	negs	r2, r3
 8004026:	4153      	adcs	r3, r2
 8004028:	b2db      	uxtb	r3, r3
 800402a:	001a      	movs	r2, r3
 800402c:	1dfb      	adds	r3, r7, #7
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d100      	bne.n	8004036 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004034:	e74b      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b014      	add	sp, #80	; 0x50
 800403e:	bd80      	pop	{r7, pc}
 8004040:	fffffe5f 	.word	0xfffffe5f

08004044 <__errno>:
 8004044:	4b01      	ldr	r3, [pc, #4]	; (800404c <__errno+0x8>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	4770      	bx	lr
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000014 	.word	0x20000014

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	2600      	movs	r6, #0
 8004054:	4d0c      	ldr	r5, [pc, #48]	; (8004088 <__libc_init_array+0x38>)
 8004056:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004058:	1b64      	subs	r4, r4, r5
 800405a:	10a4      	asrs	r4, r4, #2
 800405c:	42a6      	cmp	r6, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	2600      	movs	r6, #0
 8004062:	f001 f98b 	bl	800537c <_init>
 8004066:	4d0a      	ldr	r5, [pc, #40]	; (8004090 <__libc_init_array+0x40>)
 8004068:	4c0a      	ldr	r4, [pc, #40]	; (8004094 <__libc_init_array+0x44>)
 800406a:	1b64      	subs	r4, r4, r5
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	42a6      	cmp	r6, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	00b3      	lsls	r3, r6, #2
 8004076:	58eb      	ldr	r3, [r5, r3]
 8004078:	4798      	blx	r3
 800407a:	3601      	adds	r6, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	00b3      	lsls	r3, r6, #2
 8004080:	58eb      	ldr	r3, [r5, r3]
 8004082:	4798      	blx	r3
 8004084:	3601      	adds	r6, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	080059c0 	.word	0x080059c0
 800408c:	080059c0 	.word	0x080059c0
 8004090:	080059c0 	.word	0x080059c0
 8004094:	080059c4 	.word	0x080059c4

08004098 <memcpy>:
 8004098:	2300      	movs	r3, #0
 800409a:	b510      	push	{r4, lr}
 800409c:	429a      	cmp	r2, r3
 800409e:	d100      	bne.n	80040a2 <memcpy+0xa>
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	5ccc      	ldrb	r4, [r1, r3]
 80040a4:	54c4      	strb	r4, [r0, r3]
 80040a6:	3301      	adds	r3, #1
 80040a8:	e7f8      	b.n	800409c <memcpy+0x4>

080040aa <memset>:
 80040aa:	0003      	movs	r3, r0
 80040ac:	1882      	adds	r2, r0, r2
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d100      	bne.n	80040b4 <memset+0xa>
 80040b2:	4770      	bx	lr
 80040b4:	7019      	strb	r1, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	e7f9      	b.n	80040ae <memset+0x4>
	...

080040bc <iprintf>:
 80040bc:	b40f      	push	{r0, r1, r2, r3}
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <iprintf+0x30>)
 80040c0:	b513      	push	{r0, r1, r4, lr}
 80040c2:	681c      	ldr	r4, [r3, #0]
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d005      	beq.n	80040d4 <iprintf+0x18>
 80040c8:	69a3      	ldr	r3, [r4, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <iprintf+0x18>
 80040ce:	0020      	movs	r0, r4
 80040d0:	f000 f890 	bl	80041f4 <__sinit>
 80040d4:	ab05      	add	r3, sp, #20
 80040d6:	0020      	movs	r0, r4
 80040d8:	9a04      	ldr	r2, [sp, #16]
 80040da:	68a1      	ldr	r1, [r4, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 fb15 	bl	800470c <_vfiprintf_r>
 80040e2:	bc16      	pop	{r1, r2, r4}
 80040e4:	bc08      	pop	{r3}
 80040e6:	b004      	add	sp, #16
 80040e8:	4718      	bx	r3
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	20000014 	.word	0x20000014

080040f0 <siprintf>:
 80040f0:	b40e      	push	{r1, r2, r3}
 80040f2:	b500      	push	{lr}
 80040f4:	490b      	ldr	r1, [pc, #44]	; (8004124 <siprintf+0x34>)
 80040f6:	b09c      	sub	sp, #112	; 0x70
 80040f8:	ab1d      	add	r3, sp, #116	; 0x74
 80040fa:	9002      	str	r0, [sp, #8]
 80040fc:	9006      	str	r0, [sp, #24]
 80040fe:	9107      	str	r1, [sp, #28]
 8004100:	9104      	str	r1, [sp, #16]
 8004102:	4809      	ldr	r0, [pc, #36]	; (8004128 <siprintf+0x38>)
 8004104:	4909      	ldr	r1, [pc, #36]	; (800412c <siprintf+0x3c>)
 8004106:	cb04      	ldmia	r3!, {r2}
 8004108:	9105      	str	r1, [sp, #20]
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	a902      	add	r1, sp, #8
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f000 f9d4 	bl	80044bc <_svfiprintf_r>
 8004114:	2300      	movs	r3, #0
 8004116:	9a02      	ldr	r2, [sp, #8]
 8004118:	7013      	strb	r3, [r2, #0]
 800411a:	b01c      	add	sp, #112	; 0x70
 800411c:	bc08      	pop	{r3}
 800411e:	b003      	add	sp, #12
 8004120:	4718      	bx	r3
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	7fffffff 	.word	0x7fffffff
 8004128:	20000014 	.word	0x20000014
 800412c:	ffff0208 	.word	0xffff0208

08004130 <std>:
 8004130:	2300      	movs	r3, #0
 8004132:	b510      	push	{r4, lr}
 8004134:	0004      	movs	r4, r0
 8004136:	6003      	str	r3, [r0, #0]
 8004138:	6043      	str	r3, [r0, #4]
 800413a:	6083      	str	r3, [r0, #8]
 800413c:	8181      	strh	r1, [r0, #12]
 800413e:	6643      	str	r3, [r0, #100]	; 0x64
 8004140:	0019      	movs	r1, r3
 8004142:	81c2      	strh	r2, [r0, #14]
 8004144:	6103      	str	r3, [r0, #16]
 8004146:	6143      	str	r3, [r0, #20]
 8004148:	6183      	str	r3, [r0, #24]
 800414a:	2208      	movs	r2, #8
 800414c:	305c      	adds	r0, #92	; 0x5c
 800414e:	f7ff ffac 	bl	80040aa <memset>
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <std+0x38>)
 8004154:	6263      	str	r3, [r4, #36]	; 0x24
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <std+0x3c>)
 8004158:	6224      	str	r4, [r4, #32]
 800415a:	62a3      	str	r3, [r4, #40]	; 0x28
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <std+0x40>)
 800415e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <std+0x44>)
 8004162:	6323      	str	r3, [r4, #48]	; 0x30
 8004164:	bd10      	pop	{r4, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	08004ca9 	.word	0x08004ca9
 800416c:	08004cd1 	.word	0x08004cd1
 8004170:	08004d09 	.word	0x08004d09
 8004174:	08004d35 	.word	0x08004d35

08004178 <_cleanup_r>:
 8004178:	b510      	push	{r4, lr}
 800417a:	4902      	ldr	r1, [pc, #8]	; (8004184 <_cleanup_r+0xc>)
 800417c:	f000 f8ba 	bl	80042f4 <_fwalk_reent>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	08005041 	.word	0x08005041

08004188 <__sfmoreglue>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	2568      	movs	r5, #104	; 0x68
 800418c:	1e4a      	subs	r2, r1, #1
 800418e:	4355      	muls	r5, r2
 8004190:	000e      	movs	r6, r1
 8004192:	0029      	movs	r1, r5
 8004194:	3174      	adds	r1, #116	; 0x74
 8004196:	f000 f8d1 	bl	800433c <_malloc_r>
 800419a:	1e04      	subs	r4, r0, #0
 800419c:	d008      	beq.n	80041b0 <__sfmoreglue+0x28>
 800419e:	2100      	movs	r1, #0
 80041a0:	002a      	movs	r2, r5
 80041a2:	6001      	str	r1, [r0, #0]
 80041a4:	6046      	str	r6, [r0, #4]
 80041a6:	300c      	adds	r0, #12
 80041a8:	60a0      	str	r0, [r4, #8]
 80041aa:	3268      	adds	r2, #104	; 0x68
 80041ac:	f7ff ff7d 	bl	80040aa <memset>
 80041b0:	0020      	movs	r0, r4
 80041b2:	bd70      	pop	{r4, r5, r6, pc}

080041b4 <__sfp_lock_acquire>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	4802      	ldr	r0, [pc, #8]	; (80041c0 <__sfp_lock_acquire+0xc>)
 80041b8:	f000 f8bd 	bl	8004336 <__retarget_lock_acquire_recursive>
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	200002c8 	.word	0x200002c8

080041c4 <__sfp_lock_release>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4802      	ldr	r0, [pc, #8]	; (80041d0 <__sfp_lock_release+0xc>)
 80041c8:	f000 f8b6 	bl	8004338 <__retarget_lock_release_recursive>
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	200002c8 	.word	0x200002c8

080041d4 <__sinit_lock_acquire>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4802      	ldr	r0, [pc, #8]	; (80041e0 <__sinit_lock_acquire+0xc>)
 80041d8:	f000 f8ad 	bl	8004336 <__retarget_lock_acquire_recursive>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	200002c3 	.word	0x200002c3

080041e4 <__sinit_lock_release>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	4802      	ldr	r0, [pc, #8]	; (80041f0 <__sinit_lock_release+0xc>)
 80041e8:	f000 f8a6 	bl	8004338 <__retarget_lock_release_recursive>
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	200002c3 	.word	0x200002c3

080041f4 <__sinit>:
 80041f4:	b513      	push	{r0, r1, r4, lr}
 80041f6:	0004      	movs	r4, r0
 80041f8:	f7ff ffec 	bl	80041d4 <__sinit_lock_acquire>
 80041fc:	69a3      	ldr	r3, [r4, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <__sinit+0x14>
 8004202:	f7ff ffef 	bl	80041e4 <__sinit_lock_release>
 8004206:	bd13      	pop	{r0, r1, r4, pc}
 8004208:	64a3      	str	r3, [r4, #72]	; 0x48
 800420a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800420c:	6523      	str	r3, [r4, #80]	; 0x50
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <__sinit+0x68>)
 8004210:	4a13      	ldr	r2, [pc, #76]	; (8004260 <__sinit+0x6c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	62a2      	str	r2, [r4, #40]	; 0x28
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	42a3      	cmp	r3, r4
 800421a:	d101      	bne.n	8004220 <__sinit+0x2c>
 800421c:	2301      	movs	r3, #1
 800421e:	61a3      	str	r3, [r4, #24]
 8004220:	0020      	movs	r0, r4
 8004222:	f000 f81f 	bl	8004264 <__sfp>
 8004226:	6060      	str	r0, [r4, #4]
 8004228:	0020      	movs	r0, r4
 800422a:	f000 f81b 	bl	8004264 <__sfp>
 800422e:	60a0      	str	r0, [r4, #8]
 8004230:	0020      	movs	r0, r4
 8004232:	f000 f817 	bl	8004264 <__sfp>
 8004236:	2200      	movs	r2, #0
 8004238:	2104      	movs	r1, #4
 800423a:	60e0      	str	r0, [r4, #12]
 800423c:	6860      	ldr	r0, [r4, #4]
 800423e:	f7ff ff77 	bl	8004130 <std>
 8004242:	2201      	movs	r2, #1
 8004244:	2109      	movs	r1, #9
 8004246:	68a0      	ldr	r0, [r4, #8]
 8004248:	f7ff ff72 	bl	8004130 <std>
 800424c:	2202      	movs	r2, #2
 800424e:	2112      	movs	r1, #18
 8004250:	68e0      	ldr	r0, [r4, #12]
 8004252:	f7ff ff6d 	bl	8004130 <std>
 8004256:	2301      	movs	r3, #1
 8004258:	61a3      	str	r3, [r4, #24]
 800425a:	e7d2      	b.n	8004202 <__sinit+0xe>
 800425c:	08005928 	.word	0x08005928
 8004260:	08004179 	.word	0x08004179

08004264 <__sfp>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	0007      	movs	r7, r0
 8004268:	f7ff ffa4 	bl	80041b4 <__sfp_lock_acquire>
 800426c:	4b1f      	ldr	r3, [pc, #124]	; (80042ec <__sfp+0x88>)
 800426e:	681e      	ldr	r6, [r3, #0]
 8004270:	69b3      	ldr	r3, [r6, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <__sfp+0x18>
 8004276:	0030      	movs	r0, r6
 8004278:	f7ff ffbc 	bl	80041f4 <__sinit>
 800427c:	3648      	adds	r6, #72	; 0x48
 800427e:	68b4      	ldr	r4, [r6, #8]
 8004280:	6873      	ldr	r3, [r6, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	d504      	bpl.n	8004290 <__sfp+0x2c>
 8004286:	6833      	ldr	r3, [r6, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d022      	beq.n	80042d2 <__sfp+0x6e>
 800428c:	6836      	ldr	r6, [r6, #0]
 800428e:	e7f6      	b.n	800427e <__sfp+0x1a>
 8004290:	220c      	movs	r2, #12
 8004292:	5ea5      	ldrsh	r5, [r4, r2]
 8004294:	2d00      	cmp	r5, #0
 8004296:	d11a      	bne.n	80042ce <__sfp+0x6a>
 8004298:	0020      	movs	r0, r4
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <__sfp+0x8c>)
 800429c:	3058      	adds	r0, #88	; 0x58
 800429e:	60e3      	str	r3, [r4, #12]
 80042a0:	6665      	str	r5, [r4, #100]	; 0x64
 80042a2:	f000 f847 	bl	8004334 <__retarget_lock_init_recursive>
 80042a6:	f7ff ff8d 	bl	80041c4 <__sfp_lock_release>
 80042aa:	0020      	movs	r0, r4
 80042ac:	2208      	movs	r2, #8
 80042ae:	0029      	movs	r1, r5
 80042b0:	6025      	str	r5, [r4, #0]
 80042b2:	60a5      	str	r5, [r4, #8]
 80042b4:	6065      	str	r5, [r4, #4]
 80042b6:	6125      	str	r5, [r4, #16]
 80042b8:	6165      	str	r5, [r4, #20]
 80042ba:	61a5      	str	r5, [r4, #24]
 80042bc:	305c      	adds	r0, #92	; 0x5c
 80042be:	f7ff fef4 	bl	80040aa <memset>
 80042c2:	6365      	str	r5, [r4, #52]	; 0x34
 80042c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80042c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80042c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80042ca:	0020      	movs	r0, r4
 80042cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ce:	3468      	adds	r4, #104	; 0x68
 80042d0:	e7d7      	b.n	8004282 <__sfp+0x1e>
 80042d2:	2104      	movs	r1, #4
 80042d4:	0038      	movs	r0, r7
 80042d6:	f7ff ff57 	bl	8004188 <__sfmoreglue>
 80042da:	1e04      	subs	r4, r0, #0
 80042dc:	6030      	str	r0, [r6, #0]
 80042de:	d1d5      	bne.n	800428c <__sfp+0x28>
 80042e0:	f7ff ff70 	bl	80041c4 <__sfp_lock_release>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	e7ef      	b.n	80042ca <__sfp+0x66>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	08005928 	.word	0x08005928
 80042f0:	ffff0001 	.word	0xffff0001

080042f4 <_fwalk_reent>:
 80042f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f6:	0004      	movs	r4, r0
 80042f8:	0006      	movs	r6, r0
 80042fa:	2700      	movs	r7, #0
 80042fc:	9101      	str	r1, [sp, #4]
 80042fe:	3448      	adds	r4, #72	; 0x48
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	68a5      	ldr	r5, [r4, #8]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	9b00      	ldr	r3, [sp, #0]
 8004308:	3b01      	subs	r3, #1
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	d504      	bpl.n	8004318 <_fwalk_reent+0x24>
 800430e:	6824      	ldr	r4, [r4, #0]
 8004310:	2c00      	cmp	r4, #0
 8004312:	d1f5      	bne.n	8004300 <_fwalk_reent+0xc>
 8004314:	0038      	movs	r0, r7
 8004316:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004318:	89ab      	ldrh	r3, [r5, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d908      	bls.n	8004330 <_fwalk_reent+0x3c>
 800431e:	220e      	movs	r2, #14
 8004320:	5eab      	ldrsh	r3, [r5, r2]
 8004322:	3301      	adds	r3, #1
 8004324:	d004      	beq.n	8004330 <_fwalk_reent+0x3c>
 8004326:	0029      	movs	r1, r5
 8004328:	0030      	movs	r0, r6
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	4798      	blx	r3
 800432e:	4307      	orrs	r7, r0
 8004330:	3568      	adds	r5, #104	; 0x68
 8004332:	e7e8      	b.n	8004306 <_fwalk_reent+0x12>

08004334 <__retarget_lock_init_recursive>:
 8004334:	4770      	bx	lr

08004336 <__retarget_lock_acquire_recursive>:
 8004336:	4770      	bx	lr

08004338 <__retarget_lock_release_recursive>:
 8004338:	4770      	bx	lr
	...

0800433c <_malloc_r>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	2303      	movs	r3, #3
 8004340:	1ccd      	adds	r5, r1, #3
 8004342:	439d      	bics	r5, r3
 8004344:	3508      	adds	r5, #8
 8004346:	0006      	movs	r6, r0
 8004348:	2d0c      	cmp	r5, #12
 800434a:	d21f      	bcs.n	800438c <_malloc_r+0x50>
 800434c:	250c      	movs	r5, #12
 800434e:	42a9      	cmp	r1, r5
 8004350:	d81e      	bhi.n	8004390 <_malloc_r+0x54>
 8004352:	0030      	movs	r0, r6
 8004354:	f000 ff52 	bl	80051fc <__malloc_lock>
 8004358:	4925      	ldr	r1, [pc, #148]	; (80043f0 <_malloc_r+0xb4>)
 800435a:	680a      	ldr	r2, [r1, #0]
 800435c:	0014      	movs	r4, r2
 800435e:	2c00      	cmp	r4, #0
 8004360:	d11a      	bne.n	8004398 <_malloc_r+0x5c>
 8004362:	4f24      	ldr	r7, [pc, #144]	; (80043f4 <_malloc_r+0xb8>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <_malloc_r+0x38>
 800436a:	0021      	movs	r1, r4
 800436c:	0030      	movs	r0, r6
 800436e:	f000 fc89 	bl	8004c84 <_sbrk_r>
 8004372:	6038      	str	r0, [r7, #0]
 8004374:	0029      	movs	r1, r5
 8004376:	0030      	movs	r0, r6
 8004378:	f000 fc84 	bl	8004c84 <_sbrk_r>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d12b      	bne.n	80043d8 <_malloc_r+0x9c>
 8004380:	230c      	movs	r3, #12
 8004382:	0030      	movs	r0, r6
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	f000 ff41 	bl	800520c <__malloc_unlock>
 800438a:	e003      	b.n	8004394 <_malloc_r+0x58>
 800438c:	2d00      	cmp	r5, #0
 800438e:	dade      	bge.n	800434e <_malloc_r+0x12>
 8004390:	230c      	movs	r3, #12
 8004392:	6033      	str	r3, [r6, #0]
 8004394:	2000      	movs	r0, #0
 8004396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	1b5b      	subs	r3, r3, r5
 800439c:	d419      	bmi.n	80043d2 <_malloc_r+0x96>
 800439e:	2b0b      	cmp	r3, #11
 80043a0:	d903      	bls.n	80043aa <_malloc_r+0x6e>
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	18e4      	adds	r4, r4, r3
 80043a6:	6025      	str	r5, [r4, #0]
 80043a8:	e003      	b.n	80043b2 <_malloc_r+0x76>
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	42a2      	cmp	r2, r4
 80043ae:	d10e      	bne.n	80043ce <_malloc_r+0x92>
 80043b0:	600b      	str	r3, [r1, #0]
 80043b2:	0030      	movs	r0, r6
 80043b4:	f000 ff2a 	bl	800520c <__malloc_unlock>
 80043b8:	0020      	movs	r0, r4
 80043ba:	2207      	movs	r2, #7
 80043bc:	300b      	adds	r0, #11
 80043be:	1d23      	adds	r3, r4, #4
 80043c0:	4390      	bics	r0, r2
 80043c2:	1ac2      	subs	r2, r0, r3
 80043c4:	4298      	cmp	r0, r3
 80043c6:	d0e6      	beq.n	8004396 <_malloc_r+0x5a>
 80043c8:	1a1b      	subs	r3, r3, r0
 80043ca:	50a3      	str	r3, [r4, r2]
 80043cc:	e7e3      	b.n	8004396 <_malloc_r+0x5a>
 80043ce:	6053      	str	r3, [r2, #4]
 80043d0:	e7ef      	b.n	80043b2 <_malloc_r+0x76>
 80043d2:	0022      	movs	r2, r4
 80043d4:	6864      	ldr	r4, [r4, #4]
 80043d6:	e7c2      	b.n	800435e <_malloc_r+0x22>
 80043d8:	2303      	movs	r3, #3
 80043da:	1cc4      	adds	r4, r0, #3
 80043dc:	439c      	bics	r4, r3
 80043de:	42a0      	cmp	r0, r4
 80043e0:	d0e1      	beq.n	80043a6 <_malloc_r+0x6a>
 80043e2:	1a21      	subs	r1, r4, r0
 80043e4:	0030      	movs	r0, r6
 80043e6:	f000 fc4d 	bl	8004c84 <_sbrk_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	d1db      	bne.n	80043a6 <_malloc_r+0x6a>
 80043ee:	e7c7      	b.n	8004380 <_malloc_r+0x44>
 80043f0:	20000198 	.word	0x20000198
 80043f4:	2000019c 	.word	0x2000019c

080043f8 <__ssputs_r>:
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	688e      	ldr	r6, [r1, #8]
 80043fc:	b085      	sub	sp, #20
 80043fe:	0007      	movs	r7, r0
 8004400:	000c      	movs	r4, r1
 8004402:	9203      	str	r2, [sp, #12]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	429e      	cmp	r6, r3
 8004408:	d83c      	bhi.n	8004484 <__ssputs_r+0x8c>
 800440a:	2390      	movs	r3, #144	; 0x90
 800440c:	898a      	ldrh	r2, [r1, #12]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	421a      	tst	r2, r3
 8004412:	d034      	beq.n	800447e <__ssputs_r+0x86>
 8004414:	2503      	movs	r5, #3
 8004416:	6909      	ldr	r1, [r1, #16]
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	1a5b      	subs	r3, r3, r1
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	6963      	ldr	r3, [r4, #20]
 8004420:	9802      	ldr	r0, [sp, #8]
 8004422:	435d      	muls	r5, r3
 8004424:	0feb      	lsrs	r3, r5, #31
 8004426:	195d      	adds	r5, r3, r5
 8004428:	9b01      	ldr	r3, [sp, #4]
 800442a:	106d      	asrs	r5, r5, #1
 800442c:	3301      	adds	r3, #1
 800442e:	181b      	adds	r3, r3, r0
 8004430:	42ab      	cmp	r3, r5
 8004432:	d900      	bls.n	8004436 <__ssputs_r+0x3e>
 8004434:	001d      	movs	r5, r3
 8004436:	0553      	lsls	r3, r2, #21
 8004438:	d532      	bpl.n	80044a0 <__ssputs_r+0xa8>
 800443a:	0029      	movs	r1, r5
 800443c:	0038      	movs	r0, r7
 800443e:	f7ff ff7d 	bl	800433c <_malloc_r>
 8004442:	1e06      	subs	r6, r0, #0
 8004444:	d109      	bne.n	800445a <__ssputs_r+0x62>
 8004446:	230c      	movs	r3, #12
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	2340      	movs	r3, #64	; 0x40
 800444c:	2001      	movs	r0, #1
 800444e:	89a2      	ldrh	r2, [r4, #12]
 8004450:	4240      	negs	r0, r0
 8004452:	4313      	orrs	r3, r2
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	b005      	add	sp, #20
 8004458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445a:	9a02      	ldr	r2, [sp, #8]
 800445c:	6921      	ldr	r1, [r4, #16]
 800445e:	f7ff fe1b 	bl	8004098 <memcpy>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <__ssputs_r+0xc0>)
 8004466:	401a      	ands	r2, r3
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	4313      	orrs	r3, r2
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	6126      	str	r6, [r4, #16]
 8004472:	18f6      	adds	r6, r6, r3
 8004474:	6026      	str	r6, [r4, #0]
 8004476:	6165      	str	r5, [r4, #20]
 8004478:	9e01      	ldr	r6, [sp, #4]
 800447a:	1aed      	subs	r5, r5, r3
 800447c:	60a5      	str	r5, [r4, #8]
 800447e:	9b01      	ldr	r3, [sp, #4]
 8004480:	429e      	cmp	r6, r3
 8004482:	d900      	bls.n	8004486 <__ssputs_r+0x8e>
 8004484:	9e01      	ldr	r6, [sp, #4]
 8004486:	0032      	movs	r2, r6
 8004488:	9903      	ldr	r1, [sp, #12]
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	f000 fea3 	bl	80051d6 <memmove>
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	2000      	movs	r0, #0
 8004494:	1b9b      	subs	r3, r3, r6
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	199e      	adds	r6, r3, r6
 800449c:	6026      	str	r6, [r4, #0]
 800449e:	e7da      	b.n	8004456 <__ssputs_r+0x5e>
 80044a0:	002a      	movs	r2, r5
 80044a2:	0038      	movs	r0, r7
 80044a4:	f000 ff04 	bl	80052b0 <_realloc_r>
 80044a8:	1e06      	subs	r6, r0, #0
 80044aa:	d1e0      	bne.n	800446e <__ssputs_r+0x76>
 80044ac:	0038      	movs	r0, r7
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	f000 feb4 	bl	800521c <_free_r>
 80044b4:	e7c7      	b.n	8004446 <__ssputs_r+0x4e>
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	fffffb7f 	.word	0xfffffb7f

080044bc <_svfiprintf_r>:
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b0a1      	sub	sp, #132	; 0x84
 80044c0:	9003      	str	r0, [sp, #12]
 80044c2:	001d      	movs	r5, r3
 80044c4:	898b      	ldrh	r3, [r1, #12]
 80044c6:	000f      	movs	r7, r1
 80044c8:	0016      	movs	r6, r2
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	d511      	bpl.n	80044f2 <_svfiprintf_r+0x36>
 80044ce:	690b      	ldr	r3, [r1, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <_svfiprintf_r+0x36>
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	f7ff ff31 	bl	800433c <_malloc_r>
 80044da:	6038      	str	r0, [r7, #0]
 80044dc:	6138      	str	r0, [r7, #16]
 80044de:	2800      	cmp	r0, #0
 80044e0:	d105      	bne.n	80044ee <_svfiprintf_r+0x32>
 80044e2:	230c      	movs	r3, #12
 80044e4:	9a03      	ldr	r2, [sp, #12]
 80044e6:	3801      	subs	r0, #1
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	b021      	add	sp, #132	; 0x84
 80044ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	2300      	movs	r3, #0
 80044f4:	ac08      	add	r4, sp, #32
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	3320      	adds	r3, #32
 80044fa:	7663      	strb	r3, [r4, #25]
 80044fc:	3310      	adds	r3, #16
 80044fe:	76a3      	strb	r3, [r4, #26]
 8004500:	9507      	str	r5, [sp, #28]
 8004502:	0035      	movs	r5, r6
 8004504:	782b      	ldrb	r3, [r5, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <_svfiprintf_r+0x52>
 800450a:	2b25      	cmp	r3, #37	; 0x25
 800450c:	d147      	bne.n	800459e <_svfiprintf_r+0xe2>
 800450e:	1bab      	subs	r3, r5, r6
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	42b5      	cmp	r5, r6
 8004514:	d00c      	beq.n	8004530 <_svfiprintf_r+0x74>
 8004516:	0032      	movs	r2, r6
 8004518:	0039      	movs	r1, r7
 800451a:	9803      	ldr	r0, [sp, #12]
 800451c:	f7ff ff6c 	bl	80043f8 <__ssputs_r>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d100      	bne.n	8004526 <_svfiprintf_r+0x6a>
 8004524:	e0ae      	b.n	8004684 <_svfiprintf_r+0x1c8>
 8004526:	6962      	ldr	r2, [r4, #20]
 8004528:	9b05      	ldr	r3, [sp, #20]
 800452a:	4694      	mov	ip, r2
 800452c:	4463      	add	r3, ip
 800452e:	6163      	str	r3, [r4, #20]
 8004530:	782b      	ldrb	r3, [r5, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d100      	bne.n	8004538 <_svfiprintf_r+0x7c>
 8004536:	e0a5      	b.n	8004684 <_svfiprintf_r+0x1c8>
 8004538:	2201      	movs	r2, #1
 800453a:	2300      	movs	r3, #0
 800453c:	4252      	negs	r2, r2
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	a904      	add	r1, sp, #16
 8004542:	3254      	adds	r2, #84	; 0x54
 8004544:	1852      	adds	r2, r2, r1
 8004546:	1c6e      	adds	r6, r5, #1
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	60e3      	str	r3, [r4, #12]
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	7013      	strb	r3, [r2, #0]
 8004550:	65a3      	str	r3, [r4, #88]	; 0x58
 8004552:	2205      	movs	r2, #5
 8004554:	7831      	ldrb	r1, [r6, #0]
 8004556:	4854      	ldr	r0, [pc, #336]	; (80046a8 <_svfiprintf_r+0x1ec>)
 8004558:	f000 fe32 	bl	80051c0 <memchr>
 800455c:	1c75      	adds	r5, r6, #1
 800455e:	2800      	cmp	r0, #0
 8004560:	d11f      	bne.n	80045a2 <_svfiprintf_r+0xe6>
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	06d3      	lsls	r3, r2, #27
 8004566:	d504      	bpl.n	8004572 <_svfiprintf_r+0xb6>
 8004568:	2353      	movs	r3, #83	; 0x53
 800456a:	a904      	add	r1, sp, #16
 800456c:	185b      	adds	r3, r3, r1
 800456e:	2120      	movs	r1, #32
 8004570:	7019      	strb	r1, [r3, #0]
 8004572:	0713      	lsls	r3, r2, #28
 8004574:	d504      	bpl.n	8004580 <_svfiprintf_r+0xc4>
 8004576:	2353      	movs	r3, #83	; 0x53
 8004578:	a904      	add	r1, sp, #16
 800457a:	185b      	adds	r3, r3, r1
 800457c:	212b      	movs	r1, #43	; 0x2b
 800457e:	7019      	strb	r1, [r3, #0]
 8004580:	7833      	ldrb	r3, [r6, #0]
 8004582:	2b2a      	cmp	r3, #42	; 0x2a
 8004584:	d016      	beq.n	80045b4 <_svfiprintf_r+0xf8>
 8004586:	0035      	movs	r5, r6
 8004588:	2100      	movs	r1, #0
 800458a:	200a      	movs	r0, #10
 800458c:	68e3      	ldr	r3, [r4, #12]
 800458e:	782a      	ldrb	r2, [r5, #0]
 8004590:	1c6e      	adds	r6, r5, #1
 8004592:	3a30      	subs	r2, #48	; 0x30
 8004594:	2a09      	cmp	r2, #9
 8004596:	d94e      	bls.n	8004636 <_svfiprintf_r+0x17a>
 8004598:	2900      	cmp	r1, #0
 800459a:	d111      	bne.n	80045c0 <_svfiprintf_r+0x104>
 800459c:	e017      	b.n	80045ce <_svfiprintf_r+0x112>
 800459e:	3501      	adds	r5, #1
 80045a0:	e7b0      	b.n	8004504 <_svfiprintf_r+0x48>
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <_svfiprintf_r+0x1ec>)
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	1ac0      	subs	r0, r0, r3
 80045a8:	2301      	movs	r3, #1
 80045aa:	4083      	lsls	r3, r0
 80045ac:	4313      	orrs	r3, r2
 80045ae:	002e      	movs	r6, r5
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	e7ce      	b.n	8004552 <_svfiprintf_r+0x96>
 80045b4:	9b07      	ldr	r3, [sp, #28]
 80045b6:	1d19      	adds	r1, r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	9107      	str	r1, [sp, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db01      	blt.n	80045c4 <_svfiprintf_r+0x108>
 80045c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80045c2:	e004      	b.n	80045ce <_svfiprintf_r+0x112>
 80045c4:	425b      	negs	r3, r3
 80045c6:	60e3      	str	r3, [r4, #12]
 80045c8:	2302      	movs	r3, #2
 80045ca:	4313      	orrs	r3, r2
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	782b      	ldrb	r3, [r5, #0]
 80045d0:	2b2e      	cmp	r3, #46	; 0x2e
 80045d2:	d10a      	bne.n	80045ea <_svfiprintf_r+0x12e>
 80045d4:	786b      	ldrb	r3, [r5, #1]
 80045d6:	2b2a      	cmp	r3, #42	; 0x2a
 80045d8:	d135      	bne.n	8004646 <_svfiprintf_r+0x18a>
 80045da:	9b07      	ldr	r3, [sp, #28]
 80045dc:	3502      	adds	r5, #2
 80045de:	1d1a      	adds	r2, r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9207      	str	r2, [sp, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	db2b      	blt.n	8004640 <_svfiprintf_r+0x184>
 80045e8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ea:	4e30      	ldr	r6, [pc, #192]	; (80046ac <_svfiprintf_r+0x1f0>)
 80045ec:	2203      	movs	r2, #3
 80045ee:	0030      	movs	r0, r6
 80045f0:	7829      	ldrb	r1, [r5, #0]
 80045f2:	f000 fde5 	bl	80051c0 <memchr>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d006      	beq.n	8004608 <_svfiprintf_r+0x14c>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	1b80      	subs	r0, r0, r6
 80045fe:	4083      	lsls	r3, r0
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	3501      	adds	r5, #1
 8004604:	4313      	orrs	r3, r2
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	7829      	ldrb	r1, [r5, #0]
 800460a:	2206      	movs	r2, #6
 800460c:	4828      	ldr	r0, [pc, #160]	; (80046b0 <_svfiprintf_r+0x1f4>)
 800460e:	1c6e      	adds	r6, r5, #1
 8004610:	7621      	strb	r1, [r4, #24]
 8004612:	f000 fdd5 	bl	80051c0 <memchr>
 8004616:	2800      	cmp	r0, #0
 8004618:	d03c      	beq.n	8004694 <_svfiprintf_r+0x1d8>
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <_svfiprintf_r+0x1f8>)
 800461c:	2b00      	cmp	r3, #0
 800461e:	d125      	bne.n	800466c <_svfiprintf_r+0x1b0>
 8004620:	2207      	movs	r2, #7
 8004622:	9b07      	ldr	r3, [sp, #28]
 8004624:	3307      	adds	r3, #7
 8004626:	4393      	bics	r3, r2
 8004628:	3308      	adds	r3, #8
 800462a:	9307      	str	r3, [sp, #28]
 800462c:	6963      	ldr	r3, [r4, #20]
 800462e:	9a04      	ldr	r2, [sp, #16]
 8004630:	189b      	adds	r3, r3, r2
 8004632:	6163      	str	r3, [r4, #20]
 8004634:	e765      	b.n	8004502 <_svfiprintf_r+0x46>
 8004636:	4343      	muls	r3, r0
 8004638:	0035      	movs	r5, r6
 800463a:	2101      	movs	r1, #1
 800463c:	189b      	adds	r3, r3, r2
 800463e:	e7a6      	b.n	800458e <_svfiprintf_r+0xd2>
 8004640:	2301      	movs	r3, #1
 8004642:	425b      	negs	r3, r3
 8004644:	e7d0      	b.n	80045e8 <_svfiprintf_r+0x12c>
 8004646:	2300      	movs	r3, #0
 8004648:	200a      	movs	r0, #10
 800464a:	001a      	movs	r2, r3
 800464c:	3501      	adds	r5, #1
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	7829      	ldrb	r1, [r5, #0]
 8004652:	1c6e      	adds	r6, r5, #1
 8004654:	3930      	subs	r1, #48	; 0x30
 8004656:	2909      	cmp	r1, #9
 8004658:	d903      	bls.n	8004662 <_svfiprintf_r+0x1a6>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c5      	beq.n	80045ea <_svfiprintf_r+0x12e>
 800465e:	9209      	str	r2, [sp, #36]	; 0x24
 8004660:	e7c3      	b.n	80045ea <_svfiprintf_r+0x12e>
 8004662:	4342      	muls	r2, r0
 8004664:	0035      	movs	r5, r6
 8004666:	2301      	movs	r3, #1
 8004668:	1852      	adds	r2, r2, r1
 800466a:	e7f1      	b.n	8004650 <_svfiprintf_r+0x194>
 800466c:	ab07      	add	r3, sp, #28
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	003a      	movs	r2, r7
 8004672:	0021      	movs	r1, r4
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_svfiprintf_r+0x1fc>)
 8004676:	9803      	ldr	r0, [sp, #12]
 8004678:	e000      	b.n	800467c <_svfiprintf_r+0x1c0>
 800467a:	bf00      	nop
 800467c:	9004      	str	r0, [sp, #16]
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	d1d3      	bne.n	800462c <_svfiprintf_r+0x170>
 8004684:	89bb      	ldrh	r3, [r7, #12]
 8004686:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004688:	065b      	lsls	r3, r3, #25
 800468a:	d400      	bmi.n	800468e <_svfiprintf_r+0x1d2>
 800468c:	e72d      	b.n	80044ea <_svfiprintf_r+0x2e>
 800468e:	2001      	movs	r0, #1
 8004690:	4240      	negs	r0, r0
 8004692:	e72a      	b.n	80044ea <_svfiprintf_r+0x2e>
 8004694:	ab07      	add	r3, sp, #28
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	003a      	movs	r2, r7
 800469a:	0021      	movs	r1, r4
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <_svfiprintf_r+0x1fc>)
 800469e:	9803      	ldr	r0, [sp, #12]
 80046a0:	f000 f9de 	bl	8004a60 <_printf_i>
 80046a4:	e7ea      	b.n	800467c <_svfiprintf_r+0x1c0>
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	0800598c 	.word	0x0800598c
 80046ac:	08005992 	.word	0x08005992
 80046b0:	08005996 	.word	0x08005996
 80046b4:	00000000 	.word	0x00000000
 80046b8:	080043f9 	.word	0x080043f9

080046bc <__sfputc_r>:
 80046bc:	6893      	ldr	r3, [r2, #8]
 80046be:	b510      	push	{r4, lr}
 80046c0:	3b01      	subs	r3, #1
 80046c2:	6093      	str	r3, [r2, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da04      	bge.n	80046d2 <__sfputc_r+0x16>
 80046c8:	6994      	ldr	r4, [r2, #24]
 80046ca:	42a3      	cmp	r3, r4
 80046cc:	db07      	blt.n	80046de <__sfputc_r+0x22>
 80046ce:	290a      	cmp	r1, #10
 80046d0:	d005      	beq.n	80046de <__sfputc_r+0x22>
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	1c58      	adds	r0, r3, #1
 80046d6:	6010      	str	r0, [r2, #0]
 80046d8:	7019      	strb	r1, [r3, #0]
 80046da:	0008      	movs	r0, r1
 80046dc:	bd10      	pop	{r4, pc}
 80046de:	f000 fb2f 	bl	8004d40 <__swbuf_r>
 80046e2:	0001      	movs	r1, r0
 80046e4:	e7f9      	b.n	80046da <__sfputc_r+0x1e>

080046e6 <__sfputs_r>:
 80046e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e8:	0006      	movs	r6, r0
 80046ea:	000f      	movs	r7, r1
 80046ec:	0014      	movs	r4, r2
 80046ee:	18d5      	adds	r5, r2, r3
 80046f0:	42ac      	cmp	r4, r5
 80046f2:	d101      	bne.n	80046f8 <__sfputs_r+0x12>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e007      	b.n	8004708 <__sfputs_r+0x22>
 80046f8:	7821      	ldrb	r1, [r4, #0]
 80046fa:	003a      	movs	r2, r7
 80046fc:	0030      	movs	r0, r6
 80046fe:	f7ff ffdd 	bl	80046bc <__sfputc_r>
 8004702:	3401      	adds	r4, #1
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d1f3      	bne.n	80046f0 <__sfputs_r+0xa>
 8004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800470c <_vfiprintf_r>:
 800470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470e:	b0a1      	sub	sp, #132	; 0x84
 8004710:	0006      	movs	r6, r0
 8004712:	000c      	movs	r4, r1
 8004714:	001f      	movs	r7, r3
 8004716:	9203      	str	r2, [sp, #12]
 8004718:	2800      	cmp	r0, #0
 800471a:	d004      	beq.n	8004726 <_vfiprintf_r+0x1a>
 800471c:	6983      	ldr	r3, [r0, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <_vfiprintf_r+0x1a>
 8004722:	f7ff fd67 	bl	80041f4 <__sinit>
 8004726:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <_vfiprintf_r+0x254>)
 8004728:	429c      	cmp	r4, r3
 800472a:	d11c      	bne.n	8004766 <_vfiprintf_r+0x5a>
 800472c:	6874      	ldr	r4, [r6, #4]
 800472e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004730:	07db      	lsls	r3, r3, #31
 8004732:	d405      	bmi.n	8004740 <_vfiprintf_r+0x34>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	059b      	lsls	r3, r3, #22
 8004738:	d402      	bmi.n	8004740 <_vfiprintf_r+0x34>
 800473a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473c:	f7ff fdfb 	bl	8004336 <__retarget_lock_acquire_recursive>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	071b      	lsls	r3, r3, #28
 8004744:	d502      	bpl.n	800474c <_vfiprintf_r+0x40>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11d      	bne.n	8004788 <_vfiprintf_r+0x7c>
 800474c:	0021      	movs	r1, r4
 800474e:	0030      	movs	r0, r6
 8004750:	f000 fb60 	bl	8004e14 <__swsetup_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	d017      	beq.n	8004788 <_vfiprintf_r+0x7c>
 8004758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d50d      	bpl.n	800477a <_vfiprintf_r+0x6e>
 800475e:	2001      	movs	r0, #1
 8004760:	4240      	negs	r0, r0
 8004762:	b021      	add	sp, #132	; 0x84
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <_vfiprintf_r+0x258>)
 8004768:	429c      	cmp	r4, r3
 800476a:	d101      	bne.n	8004770 <_vfiprintf_r+0x64>
 800476c:	68b4      	ldr	r4, [r6, #8]
 800476e:	e7de      	b.n	800472e <_vfiprintf_r+0x22>
 8004770:	4b7d      	ldr	r3, [pc, #500]	; (8004968 <_vfiprintf_r+0x25c>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d1db      	bne.n	800472e <_vfiprintf_r+0x22>
 8004776:	68f4      	ldr	r4, [r6, #12]
 8004778:	e7d9      	b.n	800472e <_vfiprintf_r+0x22>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	059b      	lsls	r3, r3, #22
 800477e:	d4ee      	bmi.n	800475e <_vfiprintf_r+0x52>
 8004780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004782:	f7ff fdd9 	bl	8004338 <__retarget_lock_release_recursive>
 8004786:	e7ea      	b.n	800475e <_vfiprintf_r+0x52>
 8004788:	2300      	movs	r3, #0
 800478a:	ad08      	add	r5, sp, #32
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	3320      	adds	r3, #32
 8004790:	766b      	strb	r3, [r5, #25]
 8004792:	3310      	adds	r3, #16
 8004794:	76ab      	strb	r3, [r5, #26]
 8004796:	9707      	str	r7, [sp, #28]
 8004798:	9f03      	ldr	r7, [sp, #12]
 800479a:	783b      	ldrb	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <_vfiprintf_r+0x98>
 80047a0:	2b25      	cmp	r3, #37	; 0x25
 80047a2:	d14e      	bne.n	8004842 <_vfiprintf_r+0x136>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	1afb      	subs	r3, r7, r3
 80047a8:	9305      	str	r3, [sp, #20]
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	429f      	cmp	r7, r3
 80047ae:	d00d      	beq.n	80047cc <_vfiprintf_r+0xc0>
 80047b0:	9b05      	ldr	r3, [sp, #20]
 80047b2:	0021      	movs	r1, r4
 80047b4:	0030      	movs	r0, r6
 80047b6:	9a03      	ldr	r2, [sp, #12]
 80047b8:	f7ff ff95 	bl	80046e6 <__sfputs_r>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d100      	bne.n	80047c2 <_vfiprintf_r+0xb6>
 80047c0:	e0b5      	b.n	800492e <_vfiprintf_r+0x222>
 80047c2:	696a      	ldr	r2, [r5, #20]
 80047c4:	9b05      	ldr	r3, [sp, #20]
 80047c6:	4694      	mov	ip, r2
 80047c8:	4463      	add	r3, ip
 80047ca:	616b      	str	r3, [r5, #20]
 80047cc:	783b      	ldrb	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d100      	bne.n	80047d4 <_vfiprintf_r+0xc8>
 80047d2:	e0ac      	b.n	800492e <_vfiprintf_r+0x222>
 80047d4:	2201      	movs	r2, #1
 80047d6:	1c7b      	adds	r3, r7, #1
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	2300      	movs	r3, #0
 80047dc:	4252      	negs	r2, r2
 80047de:	606a      	str	r2, [r5, #4]
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	3254      	adds	r2, #84	; 0x54
 80047e4:	1852      	adds	r2, r2, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	60eb      	str	r3, [r5, #12]
 80047ea:	60ab      	str	r3, [r5, #8]
 80047ec:	7013      	strb	r3, [r2, #0]
 80047ee:	65ab      	str	r3, [r5, #88]	; 0x58
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	2205      	movs	r2, #5
 80047f4:	7819      	ldrb	r1, [r3, #0]
 80047f6:	485d      	ldr	r0, [pc, #372]	; (800496c <_vfiprintf_r+0x260>)
 80047f8:	f000 fce2 	bl	80051c0 <memchr>
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	1c5f      	adds	r7, r3, #1
 8004800:	2800      	cmp	r0, #0
 8004802:	d120      	bne.n	8004846 <_vfiprintf_r+0x13a>
 8004804:	682a      	ldr	r2, [r5, #0]
 8004806:	06d3      	lsls	r3, r2, #27
 8004808:	d504      	bpl.n	8004814 <_vfiprintf_r+0x108>
 800480a:	2353      	movs	r3, #83	; 0x53
 800480c:	a904      	add	r1, sp, #16
 800480e:	185b      	adds	r3, r3, r1
 8004810:	2120      	movs	r1, #32
 8004812:	7019      	strb	r1, [r3, #0]
 8004814:	0713      	lsls	r3, r2, #28
 8004816:	d504      	bpl.n	8004822 <_vfiprintf_r+0x116>
 8004818:	2353      	movs	r3, #83	; 0x53
 800481a:	a904      	add	r1, sp, #16
 800481c:	185b      	adds	r3, r3, r1
 800481e:	212b      	movs	r1, #43	; 0x2b
 8004820:	7019      	strb	r1, [r3, #0]
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b2a      	cmp	r3, #42	; 0x2a
 8004828:	d016      	beq.n	8004858 <_vfiprintf_r+0x14c>
 800482a:	2100      	movs	r1, #0
 800482c:	68eb      	ldr	r3, [r5, #12]
 800482e:	9f03      	ldr	r7, [sp, #12]
 8004830:	783a      	ldrb	r2, [r7, #0]
 8004832:	1c78      	adds	r0, r7, #1
 8004834:	3a30      	subs	r2, #48	; 0x30
 8004836:	4684      	mov	ip, r0
 8004838:	2a09      	cmp	r2, #9
 800483a:	d94f      	bls.n	80048dc <_vfiprintf_r+0x1d0>
 800483c:	2900      	cmp	r1, #0
 800483e:	d111      	bne.n	8004864 <_vfiprintf_r+0x158>
 8004840:	e017      	b.n	8004872 <_vfiprintf_r+0x166>
 8004842:	3701      	adds	r7, #1
 8004844:	e7a9      	b.n	800479a <_vfiprintf_r+0x8e>
 8004846:	4b49      	ldr	r3, [pc, #292]	; (800496c <_vfiprintf_r+0x260>)
 8004848:	682a      	ldr	r2, [r5, #0]
 800484a:	1ac0      	subs	r0, r0, r3
 800484c:	2301      	movs	r3, #1
 800484e:	4083      	lsls	r3, r0
 8004850:	4313      	orrs	r3, r2
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	9703      	str	r7, [sp, #12]
 8004856:	e7cb      	b.n	80047f0 <_vfiprintf_r+0xe4>
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	1d19      	adds	r1, r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	9107      	str	r1, [sp, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db01      	blt.n	8004868 <_vfiprintf_r+0x15c>
 8004864:	930b      	str	r3, [sp, #44]	; 0x2c
 8004866:	e004      	b.n	8004872 <_vfiprintf_r+0x166>
 8004868:	425b      	negs	r3, r3
 800486a:	60eb      	str	r3, [r5, #12]
 800486c:	2302      	movs	r3, #2
 800486e:	4313      	orrs	r3, r2
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	783b      	ldrb	r3, [r7, #0]
 8004874:	2b2e      	cmp	r3, #46	; 0x2e
 8004876:	d10a      	bne.n	800488e <_vfiprintf_r+0x182>
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b2a      	cmp	r3, #42	; 0x2a
 800487c:	d137      	bne.n	80048ee <_vfiprintf_r+0x1e2>
 800487e:	9b07      	ldr	r3, [sp, #28]
 8004880:	3702      	adds	r7, #2
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9207      	str	r2, [sp, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db2d      	blt.n	80048e8 <_vfiprintf_r+0x1dc>
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	2203      	movs	r2, #3
 8004890:	7839      	ldrb	r1, [r7, #0]
 8004892:	4837      	ldr	r0, [pc, #220]	; (8004970 <_vfiprintf_r+0x264>)
 8004894:	f000 fc94 	bl	80051c0 <memchr>
 8004898:	2800      	cmp	r0, #0
 800489a:	d007      	beq.n	80048ac <_vfiprintf_r+0x1a0>
 800489c:	4b34      	ldr	r3, [pc, #208]	; (8004970 <_vfiprintf_r+0x264>)
 800489e:	682a      	ldr	r2, [r5, #0]
 80048a0:	1ac0      	subs	r0, r0, r3
 80048a2:	2340      	movs	r3, #64	; 0x40
 80048a4:	4083      	lsls	r3, r0
 80048a6:	4313      	orrs	r3, r2
 80048a8:	3701      	adds	r7, #1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	7839      	ldrb	r1, [r7, #0]
 80048ae:	1c7b      	adds	r3, r7, #1
 80048b0:	2206      	movs	r2, #6
 80048b2:	4830      	ldr	r0, [pc, #192]	; (8004974 <_vfiprintf_r+0x268>)
 80048b4:	9303      	str	r3, [sp, #12]
 80048b6:	7629      	strb	r1, [r5, #24]
 80048b8:	f000 fc82 	bl	80051c0 <memchr>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d045      	beq.n	800494c <_vfiprintf_r+0x240>
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <_vfiprintf_r+0x26c>)
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d127      	bne.n	8004916 <_vfiprintf_r+0x20a>
 80048c6:	2207      	movs	r2, #7
 80048c8:	9b07      	ldr	r3, [sp, #28]
 80048ca:	3307      	adds	r3, #7
 80048cc:	4393      	bics	r3, r2
 80048ce:	3308      	adds	r3, #8
 80048d0:	9307      	str	r3, [sp, #28]
 80048d2:	696b      	ldr	r3, [r5, #20]
 80048d4:	9a04      	ldr	r2, [sp, #16]
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	616b      	str	r3, [r5, #20]
 80048da:	e75d      	b.n	8004798 <_vfiprintf_r+0x8c>
 80048dc:	210a      	movs	r1, #10
 80048de:	434b      	muls	r3, r1
 80048e0:	4667      	mov	r7, ip
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	3909      	subs	r1, #9
 80048e6:	e7a3      	b.n	8004830 <_vfiprintf_r+0x124>
 80048e8:	2301      	movs	r3, #1
 80048ea:	425b      	negs	r3, r3
 80048ec:	e7ce      	b.n	800488c <_vfiprintf_r+0x180>
 80048ee:	2300      	movs	r3, #0
 80048f0:	001a      	movs	r2, r3
 80048f2:	3701      	adds	r7, #1
 80048f4:	606b      	str	r3, [r5, #4]
 80048f6:	7839      	ldrb	r1, [r7, #0]
 80048f8:	1c78      	adds	r0, r7, #1
 80048fa:	3930      	subs	r1, #48	; 0x30
 80048fc:	4684      	mov	ip, r0
 80048fe:	2909      	cmp	r1, #9
 8004900:	d903      	bls.n	800490a <_vfiprintf_r+0x1fe>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0c3      	beq.n	800488e <_vfiprintf_r+0x182>
 8004906:	9209      	str	r2, [sp, #36]	; 0x24
 8004908:	e7c1      	b.n	800488e <_vfiprintf_r+0x182>
 800490a:	230a      	movs	r3, #10
 800490c:	435a      	muls	r2, r3
 800490e:	4667      	mov	r7, ip
 8004910:	1852      	adds	r2, r2, r1
 8004912:	3b09      	subs	r3, #9
 8004914:	e7ef      	b.n	80048f6 <_vfiprintf_r+0x1ea>
 8004916:	ab07      	add	r3, sp, #28
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	0022      	movs	r2, r4
 800491c:	0029      	movs	r1, r5
 800491e:	0030      	movs	r0, r6
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <_vfiprintf_r+0x270>)
 8004922:	e000      	b.n	8004926 <_vfiprintf_r+0x21a>
 8004924:	bf00      	nop
 8004926:	9004      	str	r0, [sp, #16]
 8004928:	9b04      	ldr	r3, [sp, #16]
 800492a:	3301      	adds	r3, #1
 800492c:	d1d1      	bne.n	80048d2 <_vfiprintf_r+0x1c6>
 800492e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004930:	07db      	lsls	r3, r3, #31
 8004932:	d405      	bmi.n	8004940 <_vfiprintf_r+0x234>
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	059b      	lsls	r3, r3, #22
 8004938:	d402      	bmi.n	8004940 <_vfiprintf_r+0x234>
 800493a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493c:	f7ff fcfc 	bl	8004338 <__retarget_lock_release_recursive>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	065b      	lsls	r3, r3, #25
 8004944:	d500      	bpl.n	8004948 <_vfiprintf_r+0x23c>
 8004946:	e70a      	b.n	800475e <_vfiprintf_r+0x52>
 8004948:	980d      	ldr	r0, [sp, #52]	; 0x34
 800494a:	e70a      	b.n	8004762 <_vfiprintf_r+0x56>
 800494c:	ab07      	add	r3, sp, #28
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	0022      	movs	r2, r4
 8004952:	0029      	movs	r1, r5
 8004954:	0030      	movs	r0, r6
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <_vfiprintf_r+0x270>)
 8004958:	f000 f882 	bl	8004a60 <_printf_i>
 800495c:	e7e3      	b.n	8004926 <_vfiprintf_r+0x21a>
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	0800594c 	.word	0x0800594c
 8004964:	0800596c 	.word	0x0800596c
 8004968:	0800592c 	.word	0x0800592c
 800496c:	0800598c 	.word	0x0800598c
 8004970:	08005992 	.word	0x08005992
 8004974:	08005996 	.word	0x08005996
 8004978:	00000000 	.word	0x00000000
 800497c:	080046e7 	.word	0x080046e7

08004980 <_printf_common>:
 8004980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004982:	0015      	movs	r5, r2
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	688a      	ldr	r2, [r1, #8]
 8004988:	690b      	ldr	r3, [r1, #16]
 800498a:	000c      	movs	r4, r1
 800498c:	9000      	str	r0, [sp, #0]
 800498e:	4293      	cmp	r3, r2
 8004990:	da00      	bge.n	8004994 <_printf_common+0x14>
 8004992:	0013      	movs	r3, r2
 8004994:	0022      	movs	r2, r4
 8004996:	602b      	str	r3, [r5, #0]
 8004998:	3243      	adds	r2, #67	; 0x43
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	2a00      	cmp	r2, #0
 800499e:	d001      	beq.n	80049a4 <_printf_common+0x24>
 80049a0:	3301      	adds	r3, #1
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	069b      	lsls	r3, r3, #26
 80049a8:	d502      	bpl.n	80049b0 <_printf_common+0x30>
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	3302      	adds	r3, #2
 80049ae:	602b      	str	r3, [r5, #0]
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	2306      	movs	r3, #6
 80049b4:	0017      	movs	r7, r2
 80049b6:	401f      	ands	r7, r3
 80049b8:	421a      	tst	r2, r3
 80049ba:	d027      	beq.n	8004a0c <_printf_common+0x8c>
 80049bc:	0023      	movs	r3, r4
 80049be:	3343      	adds	r3, #67	; 0x43
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	1e5a      	subs	r2, r3, #1
 80049c4:	4193      	sbcs	r3, r2
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d430      	bmi.n	8004a2e <_printf_common+0xae>
 80049cc:	0022      	movs	r2, r4
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	9800      	ldr	r0, [sp, #0]
 80049d2:	9e08      	ldr	r6, [sp, #32]
 80049d4:	3243      	adds	r2, #67	; 0x43
 80049d6:	47b0      	blx	r6
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d025      	beq.n	8004a28 <_printf_common+0xa8>
 80049dc:	2306      	movs	r3, #6
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	682a      	ldr	r2, [r5, #0]
 80049e2:	68e1      	ldr	r1, [r4, #12]
 80049e4:	2500      	movs	r5, #0
 80049e6:	4003      	ands	r3, r0
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d103      	bne.n	80049f4 <_printf_common+0x74>
 80049ec:	1a8d      	subs	r5, r1, r2
 80049ee:	43eb      	mvns	r3, r5
 80049f0:	17db      	asrs	r3, r3, #31
 80049f2:	401d      	ands	r5, r3
 80049f4:	68a3      	ldr	r3, [r4, #8]
 80049f6:	6922      	ldr	r2, [r4, #16]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	dd01      	ble.n	8004a00 <_printf_common+0x80>
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	18ed      	adds	r5, r5, r3
 8004a00:	2700      	movs	r7, #0
 8004a02:	42bd      	cmp	r5, r7
 8004a04:	d120      	bne.n	8004a48 <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e010      	b.n	8004a2c <_printf_common+0xac>
 8004a0a:	3701      	adds	r7, #1
 8004a0c:	68e3      	ldr	r3, [r4, #12]
 8004a0e:	682a      	ldr	r2, [r5, #0]
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	42bb      	cmp	r3, r7
 8004a14:	ddd2      	ble.n	80049bc <_printf_common+0x3c>
 8004a16:	0022      	movs	r2, r4
 8004a18:	2301      	movs	r3, #1
 8004a1a:	9901      	ldr	r1, [sp, #4]
 8004a1c:	9800      	ldr	r0, [sp, #0]
 8004a1e:	9e08      	ldr	r6, [sp, #32]
 8004a20:	3219      	adds	r2, #25
 8004a22:	47b0      	blx	r6
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d1f0      	bne.n	8004a0a <_printf_common+0x8a>
 8004a28:	2001      	movs	r0, #1
 8004a2a:	4240      	negs	r0, r0
 8004a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a2e:	2030      	movs	r0, #48	; 0x30
 8004a30:	18e1      	adds	r1, r4, r3
 8004a32:	3143      	adds	r1, #67	; 0x43
 8004a34:	7008      	strb	r0, [r1, #0]
 8004a36:	0021      	movs	r1, r4
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	3145      	adds	r1, #69	; 0x45
 8004a3c:	7809      	ldrb	r1, [r1, #0]
 8004a3e:	18a2      	adds	r2, r4, r2
 8004a40:	3243      	adds	r2, #67	; 0x43
 8004a42:	3302      	adds	r3, #2
 8004a44:	7011      	strb	r1, [r2, #0]
 8004a46:	e7c1      	b.n	80049cc <_printf_common+0x4c>
 8004a48:	0022      	movs	r2, r4
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	9901      	ldr	r1, [sp, #4]
 8004a4e:	9800      	ldr	r0, [sp, #0]
 8004a50:	9e08      	ldr	r6, [sp, #32]
 8004a52:	321a      	adds	r2, #26
 8004a54:	47b0      	blx	r6
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d0e6      	beq.n	8004a28 <_printf_common+0xa8>
 8004a5a:	3701      	adds	r7, #1
 8004a5c:	e7d1      	b.n	8004a02 <_printf_common+0x82>
	...

08004a60 <_printf_i>:
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	9206      	str	r2, [sp, #24]
 8004a66:	000a      	movs	r2, r1
 8004a68:	3243      	adds	r2, #67	; 0x43
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	9005      	str	r0, [sp, #20]
 8004a6e:	9204      	str	r2, [sp, #16]
 8004a70:	7e0a      	ldrb	r2, [r1, #24]
 8004a72:	000c      	movs	r4, r1
 8004a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a76:	2a78      	cmp	r2, #120	; 0x78
 8004a78:	d806      	bhi.n	8004a88 <_printf_i+0x28>
 8004a7a:	2a62      	cmp	r2, #98	; 0x62
 8004a7c:	d808      	bhi.n	8004a90 <_printf_i+0x30>
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	d100      	bne.n	8004a84 <_printf_i+0x24>
 8004a82:	e0c0      	b.n	8004c06 <_printf_i+0x1a6>
 8004a84:	2a58      	cmp	r2, #88	; 0x58
 8004a86:	d052      	beq.n	8004b2e <_printf_i+0xce>
 8004a88:	0026      	movs	r6, r4
 8004a8a:	3642      	adds	r6, #66	; 0x42
 8004a8c:	7032      	strb	r2, [r6, #0]
 8004a8e:	e022      	b.n	8004ad6 <_printf_i+0x76>
 8004a90:	0010      	movs	r0, r2
 8004a92:	3863      	subs	r0, #99	; 0x63
 8004a94:	2815      	cmp	r0, #21
 8004a96:	d8f7      	bhi.n	8004a88 <_printf_i+0x28>
 8004a98:	f7fb fb3e 	bl	8000118 <__gnu_thumb1_case_shi>
 8004a9c:	001f0016 	.word	0x001f0016
 8004aa0:	fff6fff6 	.word	0xfff6fff6
 8004aa4:	fff6fff6 	.word	0xfff6fff6
 8004aa8:	fff6001f 	.word	0xfff6001f
 8004aac:	fff6fff6 	.word	0xfff6fff6
 8004ab0:	00a8fff6 	.word	0x00a8fff6
 8004ab4:	009a0036 	.word	0x009a0036
 8004ab8:	fff6fff6 	.word	0xfff6fff6
 8004abc:	fff600b9 	.word	0xfff600b9
 8004ac0:	fff60036 	.word	0xfff60036
 8004ac4:	009efff6 	.word	0x009efff6
 8004ac8:	0026      	movs	r6, r4
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	3642      	adds	r6, #66	; 0x42
 8004ace:	1d11      	adds	r1, r2, #4
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	7033      	strb	r3, [r6, #0]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0a7      	b.n	8004c2a <_printf_i+0x1ca>
 8004ada:	6808      	ldr	r0, [r1, #0]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	1d0a      	adds	r2, r1, #4
 8004ae0:	0605      	lsls	r5, r0, #24
 8004ae2:	d50b      	bpl.n	8004afc <_printf_i+0x9c>
 8004ae4:	680d      	ldr	r5, [r1, #0]
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	da03      	bge.n	8004af4 <_printf_i+0x94>
 8004aec:	232d      	movs	r3, #45	; 0x2d
 8004aee:	9a04      	ldr	r2, [sp, #16]
 8004af0:	426d      	negs	r5, r5
 8004af2:	7013      	strb	r3, [r2, #0]
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <_printf_i+0x21c>)
 8004af6:	270a      	movs	r7, #10
 8004af8:	9303      	str	r3, [sp, #12]
 8004afa:	e032      	b.n	8004b62 <_printf_i+0x102>
 8004afc:	680d      	ldr	r5, [r1, #0]
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	0641      	lsls	r1, r0, #25
 8004b02:	d5f1      	bpl.n	8004ae8 <_printf_i+0x88>
 8004b04:	b22d      	sxth	r5, r5
 8004b06:	e7ef      	b.n	8004ae8 <_printf_i+0x88>
 8004b08:	680d      	ldr	r5, [r1, #0]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	1d08      	adds	r0, r1, #4
 8004b0e:	6018      	str	r0, [r3, #0]
 8004b10:	062e      	lsls	r6, r5, #24
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0xb8>
 8004b14:	680d      	ldr	r5, [r1, #0]
 8004b16:	e003      	b.n	8004b20 <_printf_i+0xc0>
 8004b18:	066d      	lsls	r5, r5, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0xb4>
 8004b1c:	680d      	ldr	r5, [r1, #0]
 8004b1e:	b2ad      	uxth	r5, r5
 8004b20:	4b56      	ldr	r3, [pc, #344]	; (8004c7c <_printf_i+0x21c>)
 8004b22:	270a      	movs	r7, #10
 8004b24:	9303      	str	r3, [sp, #12]
 8004b26:	2a6f      	cmp	r2, #111	; 0x6f
 8004b28:	d117      	bne.n	8004b5a <_printf_i+0xfa>
 8004b2a:	2708      	movs	r7, #8
 8004b2c:	e015      	b.n	8004b5a <_printf_i+0xfa>
 8004b2e:	3145      	adds	r1, #69	; 0x45
 8004b30:	700a      	strb	r2, [r1, #0]
 8004b32:	4a52      	ldr	r2, [pc, #328]	; (8004c7c <_printf_i+0x21c>)
 8004b34:	9203      	str	r2, [sp, #12]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	ca20      	ldmia	r2!, {r5}
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	0608      	lsls	r0, r1, #24
 8004b40:	d550      	bpl.n	8004be4 <_printf_i+0x184>
 8004b42:	07cb      	lsls	r3, r1, #31
 8004b44:	d502      	bpl.n	8004b4c <_printf_i+0xec>
 8004b46:	2320      	movs	r3, #32
 8004b48:	4319      	orrs	r1, r3
 8004b4a:	6021      	str	r1, [r4, #0]
 8004b4c:	2710      	movs	r7, #16
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	d103      	bne.n	8004b5a <_printf_i+0xfa>
 8004b52:	2320      	movs	r3, #32
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	439a      	bics	r2, r3
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	3343      	adds	r3, #67	; 0x43
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db03      	blt.n	8004b72 <_printf_i+0x112>
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	6821      	ldr	r1, [r4, #0]
 8004b6e:	4391      	bics	r1, r2
 8004b70:	6021      	str	r1, [r4, #0]
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	d102      	bne.n	8004b7c <_printf_i+0x11c>
 8004b76:	9e04      	ldr	r6, [sp, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00c      	beq.n	8004b96 <_printf_i+0x136>
 8004b7c:	9e04      	ldr	r6, [sp, #16]
 8004b7e:	0028      	movs	r0, r5
 8004b80:	0039      	movs	r1, r7
 8004b82:	f7fb fb59 	bl	8000238 <__aeabi_uidivmod>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	3e01      	subs	r6, #1
 8004b8a:	5c5b      	ldrb	r3, [r3, r1]
 8004b8c:	7033      	strb	r3, [r6, #0]
 8004b8e:	002b      	movs	r3, r5
 8004b90:	0005      	movs	r5, r0
 8004b92:	429f      	cmp	r7, r3
 8004b94:	d9f3      	bls.n	8004b7e <_printf_i+0x11e>
 8004b96:	2f08      	cmp	r7, #8
 8004b98:	d109      	bne.n	8004bae <_printf_i+0x14e>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	07db      	lsls	r3, r3, #31
 8004b9e:	d506      	bpl.n	8004bae <_printf_i+0x14e>
 8004ba0:	6863      	ldr	r3, [r4, #4]
 8004ba2:	6922      	ldr	r2, [r4, #16]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	dc02      	bgt.n	8004bae <_printf_i+0x14e>
 8004ba8:	2330      	movs	r3, #48	; 0x30
 8004baa:	3e01      	subs	r6, #1
 8004bac:	7033      	strb	r3, [r6, #0]
 8004bae:	9b04      	ldr	r3, [sp, #16]
 8004bb0:	1b9b      	subs	r3, r3, r6
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	9b07      	ldr	r3, [sp, #28]
 8004bb6:	0021      	movs	r1, r4
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	9805      	ldr	r0, [sp, #20]
 8004bbc:	9b06      	ldr	r3, [sp, #24]
 8004bbe:	aa09      	add	r2, sp, #36	; 0x24
 8004bc0:	f7ff fede 	bl	8004980 <_printf_common>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d135      	bne.n	8004c34 <_printf_i+0x1d4>
 8004bc8:	2001      	movs	r0, #1
 8004bca:	4240      	negs	r0, r0
 8004bcc:	b00b      	add	sp, #44	; 0x2c
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	6809      	ldr	r1, [r1, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	0022      	movs	r2, r4
 8004bda:	2178      	movs	r1, #120	; 0x78
 8004bdc:	3245      	adds	r2, #69	; 0x45
 8004bde:	7011      	strb	r1, [r2, #0]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <_printf_i+0x220>)
 8004be2:	e7a7      	b.n	8004b34 <_printf_i+0xd4>
 8004be4:	0648      	lsls	r0, r1, #25
 8004be6:	d5ac      	bpl.n	8004b42 <_printf_i+0xe2>
 8004be8:	b2ad      	uxth	r5, r5
 8004bea:	e7aa      	b.n	8004b42 <_printf_i+0xe2>
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	680d      	ldr	r5, [r1, #0]
 8004bf0:	1d10      	adds	r0, r2, #4
 8004bf2:	6949      	ldr	r1, [r1, #20]
 8004bf4:	6018      	str	r0, [r3, #0]
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	062e      	lsls	r6, r5, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0x1a0>
 8004bfc:	6019      	str	r1, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0x1a6>
 8004c00:	066d      	lsls	r5, r5, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0x19c>
 8004c04:	8019      	strh	r1, [r3, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9e04      	ldr	r6, [sp, #16]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	e7d2      	b.n	8004bb4 <_printf_i+0x154>
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	1d11      	adds	r1, r2, #4
 8004c12:	6019      	str	r1, [r3, #0]
 8004c14:	6816      	ldr	r6, [r2, #0]
 8004c16:	2100      	movs	r1, #0
 8004c18:	0030      	movs	r0, r6
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	f000 fad0 	bl	80051c0 <memchr>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d001      	beq.n	8004c28 <_printf_i+0x1c8>
 8004c24:	1b80      	subs	r0, r0, r6
 8004c26:	6060      	str	r0, [r4, #4]
 8004c28:	6863      	ldr	r3, [r4, #4]
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9a04      	ldr	r2, [sp, #16]
 8004c30:	7013      	strb	r3, [r2, #0]
 8004c32:	e7bf      	b.n	8004bb4 <_printf_i+0x154>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	0032      	movs	r2, r6
 8004c38:	9906      	ldr	r1, [sp, #24]
 8004c3a:	9805      	ldr	r0, [sp, #20]
 8004c3c:	9d07      	ldr	r5, [sp, #28]
 8004c3e:	47a8      	blx	r5
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d0c1      	beq.n	8004bc8 <_printf_i+0x168>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d415      	bmi.n	8004c76 <_printf_i+0x216>
 8004c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4c:	68e0      	ldr	r0, [r4, #12]
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	dabc      	bge.n	8004bcc <_printf_i+0x16c>
 8004c52:	0018      	movs	r0, r3
 8004c54:	e7ba      	b.n	8004bcc <_printf_i+0x16c>
 8004c56:	0022      	movs	r2, r4
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9906      	ldr	r1, [sp, #24]
 8004c5c:	9805      	ldr	r0, [sp, #20]
 8004c5e:	9e07      	ldr	r6, [sp, #28]
 8004c60:	3219      	adds	r2, #25
 8004c62:	47b0      	blx	r6
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d0af      	beq.n	8004bc8 <_printf_i+0x168>
 8004c68:	3501      	adds	r5, #1
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	dcf0      	bgt.n	8004c56 <_printf_i+0x1f6>
 8004c74:	e7e9      	b.n	8004c4a <_printf_i+0x1ea>
 8004c76:	2500      	movs	r5, #0
 8004c78:	e7f7      	b.n	8004c6a <_printf_i+0x20a>
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	0800599d 	.word	0x0800599d
 8004c80:	080059ae 	.word	0x080059ae

08004c84 <_sbrk_r>:
 8004c84:	2300      	movs	r3, #0
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	4d06      	ldr	r5, [pc, #24]	; (8004ca4 <_sbrk_r+0x20>)
 8004c8a:	0004      	movs	r4, r0
 8004c8c:	0008      	movs	r0, r1
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f7fc ff3c 	bl	8001b0c <_sbrk>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_sbrk_r+0x1c>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d000      	beq.n	8004ca0 <_sbrk_r+0x1c>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	200002cc 	.word	0x200002cc

08004ca8 <__sread>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	000c      	movs	r4, r1
 8004cac:	250e      	movs	r5, #14
 8004cae:	5f49      	ldrsh	r1, [r1, r5]
 8004cb0:	f000 fb24 	bl	80052fc <_read_r>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	db03      	blt.n	8004cc0 <__sread+0x18>
 8004cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cba:	181b      	adds	r3, r3, r0
 8004cbc:	6563      	str	r3, [r4, #84]	; 0x54
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	4a02      	ldr	r2, [pc, #8]	; (8004ccc <__sread+0x24>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	e7f9      	b.n	8004cbe <__sread+0x16>
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	ffffefff 	.word	0xffffefff

08004cd0 <__swrite>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	001f      	movs	r7, r3
 8004cd4:	898b      	ldrh	r3, [r1, #12]
 8004cd6:	0005      	movs	r5, r0
 8004cd8:	000c      	movs	r4, r1
 8004cda:	0016      	movs	r6, r2
 8004cdc:	05db      	lsls	r3, r3, #23
 8004cde:	d505      	bpl.n	8004cec <__swrite+0x1c>
 8004ce0:	230e      	movs	r3, #14
 8004ce2:	5ec9      	ldrsh	r1, [r1, r3]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	f000 f9ea 	bl	80050c0 <_lseek_r>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <__swrite+0x34>)
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	0032      	movs	r2, r6
 8004cf8:	230e      	movs	r3, #14
 8004cfa:	5ee1      	ldrsh	r1, [r4, r3]
 8004cfc:	003b      	movs	r3, r7
 8004cfe:	f000 f875 	bl	8004dec <_write_r>
 8004d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d04:	ffffefff 	.word	0xffffefff

08004d08 <__sseek>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	000c      	movs	r4, r1
 8004d0c:	250e      	movs	r5, #14
 8004d0e:	5f49      	ldrsh	r1, [r1, r5]
 8004d10:	f000 f9d6 	bl	80050c0 <_lseek_r>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	1c42      	adds	r2, r0, #1
 8004d18:	d103      	bne.n	8004d22 <__sseek+0x1a>
 8004d1a:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <__sseek+0x28>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	2280      	movs	r2, #128	; 0x80
 8004d24:	0152      	lsls	r2, r2, #5
 8004d26:	4313      	orrs	r3, r2
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d2c:	e7f8      	b.n	8004d20 <__sseek+0x18>
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	ffffefff 	.word	0xffffefff

08004d34 <__sclose>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	230e      	movs	r3, #14
 8004d38:	5ec9      	ldrsh	r1, [r1, r3]
 8004d3a:	f000 f8e3 	bl	8004f04 <_close_r>
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <__swbuf_r>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	0005      	movs	r5, r0
 8004d44:	000e      	movs	r6, r1
 8004d46:	0014      	movs	r4, r2
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d004      	beq.n	8004d56 <__swbuf_r+0x16>
 8004d4c:	6983      	ldr	r3, [r0, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <__swbuf_r+0x16>
 8004d52:	f7ff fa4f 	bl	80041f4 <__sinit>
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <__swbuf_r+0xa0>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d12e      	bne.n	8004dba <__swbuf_r+0x7a>
 8004d5c:	686c      	ldr	r4, [r5, #4]
 8004d5e:	69a3      	ldr	r3, [r4, #24]
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	d532      	bpl.n	8004dce <__swbuf_r+0x8e>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02f      	beq.n	8004dce <__swbuf_r+0x8e>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	6922      	ldr	r2, [r4, #16]
 8004d72:	b2f7      	uxtb	r7, r6
 8004d74:	1a98      	subs	r0, r3, r2
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	b2f6      	uxtb	r6, r6
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	dc05      	bgt.n	8004d8a <__swbuf_r+0x4a>
 8004d7e:	0021      	movs	r1, r4
 8004d80:	0028      	movs	r0, r5
 8004d82:	f000 f95d 	bl	8005040 <_fflush_r>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d127      	bne.n	8004dda <__swbuf_r+0x9a>
 8004d8a:	68a3      	ldr	r3, [r4, #8]
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	701f      	strb	r7, [r3, #0]
 8004d9a:	6963      	ldr	r3, [r4, #20]
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	d004      	beq.n	8004daa <__swbuf_r+0x6a>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	07db      	lsls	r3, r3, #31
 8004da4:	d507      	bpl.n	8004db6 <__swbuf_r+0x76>
 8004da6:	2e0a      	cmp	r6, #10
 8004da8:	d105      	bne.n	8004db6 <__swbuf_r+0x76>
 8004daa:	0021      	movs	r1, r4
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f947 	bl	8005040 <_fflush_r>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d111      	bne.n	8004dda <__swbuf_r+0x9a>
 8004db6:	0030      	movs	r0, r6
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <__swbuf_r+0xa4>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	d101      	bne.n	8004dc4 <__swbuf_r+0x84>
 8004dc0:	68ac      	ldr	r4, [r5, #8]
 8004dc2:	e7cc      	b.n	8004d5e <__swbuf_r+0x1e>
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <__swbuf_r+0xa8>)
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	d1c9      	bne.n	8004d5e <__swbuf_r+0x1e>
 8004dca:	68ec      	ldr	r4, [r5, #12]
 8004dcc:	e7c7      	b.n	8004d5e <__swbuf_r+0x1e>
 8004dce:	0021      	movs	r1, r4
 8004dd0:	0028      	movs	r0, r5
 8004dd2:	f000 f81f 	bl	8004e14 <__swsetup_r>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d0c9      	beq.n	8004d6e <__swbuf_r+0x2e>
 8004dda:	2601      	movs	r6, #1
 8004ddc:	4276      	negs	r6, r6
 8004dde:	e7ea      	b.n	8004db6 <__swbuf_r+0x76>
 8004de0:	0800594c 	.word	0x0800594c
 8004de4:	0800596c 	.word	0x0800596c
 8004de8:	0800592c 	.word	0x0800592c

08004dec <_write_r>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	0004      	movs	r4, r0
 8004df0:	0008      	movs	r0, r1
 8004df2:	0011      	movs	r1, r2
 8004df4:	001a      	movs	r2, r3
 8004df6:	2300      	movs	r3, #0
 8004df8:	4d05      	ldr	r5, [pc, #20]	; (8004e10 <_write_r+0x24>)
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	f7fc fb7e 	bl	80014fc <_write>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d103      	bne.n	8004e0c <_write_r+0x20>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d000      	beq.n	8004e0c <_write_r+0x20>
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	200002cc 	.word	0x200002cc

08004e14 <__swsetup_r>:
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <__swsetup_r+0xe0>)
 8004e16:	b570      	push	{r4, r5, r6, lr}
 8004e18:	681d      	ldr	r5, [r3, #0]
 8004e1a:	0006      	movs	r6, r0
 8004e1c:	000c      	movs	r4, r1
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d005      	beq.n	8004e2e <__swsetup_r+0x1a>
 8004e22:	69ab      	ldr	r3, [r5, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <__swsetup_r+0x1a>
 8004e28:	0028      	movs	r0, r5
 8004e2a:	f7ff f9e3 	bl	80041f4 <__sinit>
 8004e2e:	4b32      	ldr	r3, [pc, #200]	; (8004ef8 <__swsetup_r+0xe4>)
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d10f      	bne.n	8004e54 <__swsetup_r+0x40>
 8004e34:	686c      	ldr	r4, [r5, #4]
 8004e36:	230c      	movs	r3, #12
 8004e38:	5ee2      	ldrsh	r2, [r4, r3]
 8004e3a:	b293      	uxth	r3, r2
 8004e3c:	0711      	lsls	r1, r2, #28
 8004e3e:	d42d      	bmi.n	8004e9c <__swsetup_r+0x88>
 8004e40:	06d9      	lsls	r1, r3, #27
 8004e42:	d411      	bmi.n	8004e68 <__swsetup_r+0x54>
 8004e44:	2309      	movs	r3, #9
 8004e46:	2001      	movs	r0, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	3337      	adds	r3, #55	; 0x37
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	4240      	negs	r0, r0
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	4b29      	ldr	r3, [pc, #164]	; (8004efc <__swsetup_r+0xe8>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d101      	bne.n	8004e5e <__swsetup_r+0x4a>
 8004e5a:	68ac      	ldr	r4, [r5, #8]
 8004e5c:	e7eb      	b.n	8004e36 <__swsetup_r+0x22>
 8004e5e:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <__swsetup_r+0xec>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d1e8      	bne.n	8004e36 <__swsetup_r+0x22>
 8004e64:	68ec      	ldr	r4, [r5, #12]
 8004e66:	e7e6      	b.n	8004e36 <__swsetup_r+0x22>
 8004e68:	075b      	lsls	r3, r3, #29
 8004e6a:	d513      	bpl.n	8004e94 <__swsetup_r+0x80>
 8004e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d008      	beq.n	8004e84 <__swsetup_r+0x70>
 8004e72:	0023      	movs	r3, r4
 8004e74:	3344      	adds	r3, #68	; 0x44
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d002      	beq.n	8004e80 <__swsetup_r+0x6c>
 8004e7a:	0030      	movs	r0, r6
 8004e7c:	f000 f9ce 	bl	800521c <_free_r>
 8004e80:	2300      	movs	r3, #0
 8004e82:	6363      	str	r3, [r4, #52]	; 0x34
 8004e84:	2224      	movs	r2, #36	; 0x24
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	4393      	bics	r3, r2
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2308      	movs	r3, #8
 8004e96:	89a2      	ldrh	r2, [r4, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <__swsetup_r+0xa6>
 8004ea2:	21a0      	movs	r1, #160	; 0xa0
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	0089      	lsls	r1, r1, #2
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	400b      	ands	r3, r1
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <__swsetup_r+0xa6>
 8004eb2:	0021      	movs	r1, r4
 8004eb4:	0030      	movs	r0, r6
 8004eb6:	f000 f93f 	bl	8005138 <__smakebuf_r>
 8004eba:	220c      	movs	r2, #12
 8004ebc:	5ea3      	ldrsh	r3, [r4, r2]
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	b299      	uxth	r1, r3
 8004ec4:	4002      	ands	r2, r0
 8004ec6:	4203      	tst	r3, r0
 8004ec8:	d00f      	beq.n	8004eea <__swsetup_r+0xd6>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60a2      	str	r2, [r4, #8]
 8004ece:	6962      	ldr	r2, [r4, #20]
 8004ed0:	4252      	negs	r2, r2
 8004ed2:	61a2      	str	r2, [r4, #24]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	6922      	ldr	r2, [r4, #16]
 8004ed8:	4282      	cmp	r2, r0
 8004eda:	d1ba      	bne.n	8004e52 <__swsetup_r+0x3e>
 8004edc:	060a      	lsls	r2, r1, #24
 8004ede:	d5b8      	bpl.n	8004e52 <__swsetup_r+0x3e>
 8004ee0:	2240      	movs	r2, #64	; 0x40
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	3801      	subs	r0, #1
 8004ee8:	e7b3      	b.n	8004e52 <__swsetup_r+0x3e>
 8004eea:	0788      	lsls	r0, r1, #30
 8004eec:	d400      	bmi.n	8004ef0 <__swsetup_r+0xdc>
 8004eee:	6962      	ldr	r2, [r4, #20]
 8004ef0:	60a2      	str	r2, [r4, #8]
 8004ef2:	e7ef      	b.n	8004ed4 <__swsetup_r+0xc0>
 8004ef4:	20000014 	.word	0x20000014
 8004ef8:	0800594c 	.word	0x0800594c
 8004efc:	0800596c 	.word	0x0800596c
 8004f00:	0800592c 	.word	0x0800592c

08004f04 <_close_r>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b570      	push	{r4, r5, r6, lr}
 8004f08:	4d06      	ldr	r5, [pc, #24]	; (8004f24 <_close_r+0x20>)
 8004f0a:	0004      	movs	r4, r0
 8004f0c:	0008      	movs	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fc fdd0 	bl	8001ab4 <_close>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d103      	bne.n	8004f20 <_close_r+0x1c>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d000      	beq.n	8004f20 <_close_r+0x1c>
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	200002cc 	.word	0x200002cc

08004f28 <__sflush_r>:
 8004f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2a:	898b      	ldrh	r3, [r1, #12]
 8004f2c:	0005      	movs	r5, r0
 8004f2e:	000c      	movs	r4, r1
 8004f30:	071a      	lsls	r2, r3, #28
 8004f32:	d45f      	bmi.n	8004ff4 <__sflush_r+0xcc>
 8004f34:	684a      	ldr	r2, [r1, #4]
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	dc04      	bgt.n	8004f44 <__sflush_r+0x1c>
 8004f3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	dc01      	bgt.n	8004f44 <__sflush_r+0x1c>
 8004f40:	2000      	movs	r0, #0
 8004f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f46:	2f00      	cmp	r7, #0
 8004f48:	d0fa      	beq.n	8004f40 <__sflush_r+0x18>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	682e      	ldr	r6, [r5, #0]
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	001a      	movs	r2, r3
 8004f54:	0149      	lsls	r1, r1, #5
 8004f56:	400a      	ands	r2, r1
 8004f58:	420b      	tst	r3, r1
 8004f5a:	d034      	beq.n	8004fc6 <__sflush_r+0x9e>
 8004f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	075b      	lsls	r3, r3, #29
 8004f62:	d506      	bpl.n	8004f72 <__sflush_r+0x4a>
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	1ac0      	subs	r0, r0, r3
 8004f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <__sflush_r+0x4a>
 8004f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f70:	1ac0      	subs	r0, r0, r3
 8004f72:	0002      	movs	r2, r0
 8004f74:	6a21      	ldr	r1, [r4, #32]
 8004f76:	2300      	movs	r3, #0
 8004f78:	0028      	movs	r0, r5
 8004f7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f7c:	47b8      	blx	r7
 8004f7e:	89a1      	ldrh	r1, [r4, #12]
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d106      	bne.n	8004f92 <__sflush_r+0x6a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	2b1d      	cmp	r3, #29
 8004f88:	d831      	bhi.n	8004fee <__sflush_r+0xc6>
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <__sflush_r+0x114>)
 8004f8c:	40da      	lsrs	r2, r3
 8004f8e:	07d3      	lsls	r3, r2, #31
 8004f90:	d52d      	bpl.n	8004fee <__sflush_r+0xc6>
 8004f92:	2300      	movs	r3, #0
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	04cb      	lsls	r3, r1, #19
 8004f9c:	d505      	bpl.n	8004faa <__sflush_r+0x82>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d102      	bne.n	8004fa8 <__sflush_r+0x80>
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d100      	bne.n	8004faa <__sflush_r+0x82>
 8004fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8004faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fac:	602e      	str	r6, [r5, #0]
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	d0c6      	beq.n	8004f40 <__sflush_r+0x18>
 8004fb2:	0023      	movs	r3, r4
 8004fb4:	3344      	adds	r3, #68	; 0x44
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	d002      	beq.n	8004fc0 <__sflush_r+0x98>
 8004fba:	0028      	movs	r0, r5
 8004fbc:	f000 f92e 	bl	800521c <_free_r>
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004fc4:	e7bd      	b.n	8004f42 <__sflush_r+0x1a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	0028      	movs	r0, r5
 8004fca:	6a21      	ldr	r1, [r4, #32]
 8004fcc:	47b8      	blx	r7
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d1c5      	bne.n	8004f5e <__sflush_r+0x36>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0c2      	beq.n	8004f5e <__sflush_r+0x36>
 8004fd8:	2b1d      	cmp	r3, #29
 8004fda:	d001      	beq.n	8004fe0 <__sflush_r+0xb8>
 8004fdc:	2b16      	cmp	r3, #22
 8004fde:	d101      	bne.n	8004fe4 <__sflush_r+0xbc>
 8004fe0:	602e      	str	r6, [r5, #0]
 8004fe2:	e7ad      	b.n	8004f40 <__sflush_r+0x18>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	89a2      	ldrh	r2, [r4, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	e7a9      	b.n	8004f42 <__sflush_r+0x1a>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	e7fa      	b.n	8004fea <__sflush_r+0xc2>
 8004ff4:	690f      	ldr	r7, [r1, #16]
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d0a2      	beq.n	8004f40 <__sflush_r+0x18>
 8004ffa:	680a      	ldr	r2, [r1, #0]
 8004ffc:	600f      	str	r7, [r1, #0]
 8004ffe:	1bd2      	subs	r2, r2, r7
 8005000:	9201      	str	r2, [sp, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	079b      	lsls	r3, r3, #30
 8005006:	d100      	bne.n	800500a <__sflush_r+0xe2>
 8005008:	694a      	ldr	r2, [r1, #20]
 800500a:	60a2      	str	r2, [r4, #8]
 800500c:	9b01      	ldr	r3, [sp, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	dc00      	bgt.n	8005014 <__sflush_r+0xec>
 8005012:	e795      	b.n	8004f40 <__sflush_r+0x18>
 8005014:	003a      	movs	r2, r7
 8005016:	0028      	movs	r0, r5
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	6a21      	ldr	r1, [r4, #32]
 800501c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800501e:	47b0      	blx	r6
 8005020:	2800      	cmp	r0, #0
 8005022:	dc06      	bgt.n	8005032 <__sflush_r+0x10a>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	2001      	movs	r0, #1
 8005028:	89a2      	ldrh	r2, [r4, #12]
 800502a:	4240      	negs	r0, r0
 800502c:	4313      	orrs	r3, r2
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	e787      	b.n	8004f42 <__sflush_r+0x1a>
 8005032:	9b01      	ldr	r3, [sp, #4]
 8005034:	183f      	adds	r7, r7, r0
 8005036:	1a1b      	subs	r3, r3, r0
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	e7e7      	b.n	800500c <__sflush_r+0xe4>
 800503c:	20400001 	.word	0x20400001

08005040 <_fflush_r>:
 8005040:	690b      	ldr	r3, [r1, #16]
 8005042:	b570      	push	{r4, r5, r6, lr}
 8005044:	0005      	movs	r5, r0
 8005046:	000c      	movs	r4, r1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <_fflush_r+0x12>
 800504c:	2500      	movs	r5, #0
 800504e:	0028      	movs	r0, r5
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	2800      	cmp	r0, #0
 8005054:	d004      	beq.n	8005060 <_fflush_r+0x20>
 8005056:	6983      	ldr	r3, [r0, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <_fflush_r+0x20>
 800505c:	f7ff f8ca 	bl	80041f4 <__sinit>
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <_fflush_r+0x74>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d11b      	bne.n	800509e <_fflush_r+0x5e>
 8005066:	686c      	ldr	r4, [r5, #4]
 8005068:	220c      	movs	r2, #12
 800506a:	5ea3      	ldrsh	r3, [r4, r2]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ed      	beq.n	800504c <_fflush_r+0xc>
 8005070:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005072:	07d2      	lsls	r2, r2, #31
 8005074:	d404      	bmi.n	8005080 <_fflush_r+0x40>
 8005076:	059b      	lsls	r3, r3, #22
 8005078:	d402      	bmi.n	8005080 <_fflush_r+0x40>
 800507a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507c:	f7ff f95b 	bl	8004336 <__retarget_lock_acquire_recursive>
 8005080:	0028      	movs	r0, r5
 8005082:	0021      	movs	r1, r4
 8005084:	f7ff ff50 	bl	8004f28 <__sflush_r>
 8005088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800508a:	0005      	movs	r5, r0
 800508c:	07db      	lsls	r3, r3, #31
 800508e:	d4de      	bmi.n	800504e <_fflush_r+0xe>
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	059b      	lsls	r3, r3, #22
 8005094:	d4db      	bmi.n	800504e <_fflush_r+0xe>
 8005096:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005098:	f7ff f94e 	bl	8004338 <__retarget_lock_release_recursive>
 800509c:	e7d7      	b.n	800504e <_fflush_r+0xe>
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <_fflush_r+0x78>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d101      	bne.n	80050a8 <_fflush_r+0x68>
 80050a4:	68ac      	ldr	r4, [r5, #8]
 80050a6:	e7df      	b.n	8005068 <_fflush_r+0x28>
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <_fflush_r+0x7c>)
 80050aa:	429c      	cmp	r4, r3
 80050ac:	d1dc      	bne.n	8005068 <_fflush_r+0x28>
 80050ae:	68ec      	ldr	r4, [r5, #12]
 80050b0:	e7da      	b.n	8005068 <_fflush_r+0x28>
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	0800594c 	.word	0x0800594c
 80050b8:	0800596c 	.word	0x0800596c
 80050bc:	0800592c 	.word	0x0800592c

080050c0 <_lseek_r>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	0004      	movs	r4, r0
 80050c4:	0008      	movs	r0, r1
 80050c6:	0011      	movs	r1, r2
 80050c8:	001a      	movs	r2, r3
 80050ca:	2300      	movs	r3, #0
 80050cc:	4d05      	ldr	r5, [pc, #20]	; (80050e4 <_lseek_r+0x24>)
 80050ce:	602b      	str	r3, [r5, #0]
 80050d0:	f7fc fd11 	bl	8001af6 <_lseek>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d103      	bne.n	80050e0 <_lseek_r+0x20>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d000      	beq.n	80050e0 <_lseek_r+0x20>
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	200002cc 	.word	0x200002cc

080050e8 <__swhatbuf_r>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	000e      	movs	r6, r1
 80050ec:	001d      	movs	r5, r3
 80050ee:	230e      	movs	r3, #14
 80050f0:	5ec9      	ldrsh	r1, [r1, r3]
 80050f2:	0014      	movs	r4, r2
 80050f4:	b096      	sub	sp, #88	; 0x58
 80050f6:	2900      	cmp	r1, #0
 80050f8:	da07      	bge.n	800510a <__swhatbuf_r+0x22>
 80050fa:	2300      	movs	r3, #0
 80050fc:	602b      	str	r3, [r5, #0]
 80050fe:	89b3      	ldrh	r3, [r6, #12]
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	d411      	bmi.n	8005128 <__swhatbuf_r+0x40>
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	e00f      	b.n	800512a <__swhatbuf_r+0x42>
 800510a:	466a      	mov	r2, sp
 800510c:	f000 f90a 	bl	8005324 <_fstat_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	dbf2      	blt.n	80050fa <__swhatbuf_r+0x12>
 8005114:	23f0      	movs	r3, #240	; 0xf0
 8005116:	9901      	ldr	r1, [sp, #4]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	4019      	ands	r1, r3
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <__swhatbuf_r+0x4c>)
 800511e:	18c9      	adds	r1, r1, r3
 8005120:	424b      	negs	r3, r1
 8005122:	4159      	adcs	r1, r3
 8005124:	6029      	str	r1, [r5, #0]
 8005126:	e7ed      	b.n	8005104 <__swhatbuf_r+0x1c>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	2000      	movs	r0, #0
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	b016      	add	sp, #88	; 0x58
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	ffffe000 	.word	0xffffe000

08005138 <__smakebuf_r>:
 8005138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513a:	2602      	movs	r6, #2
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	0005      	movs	r5, r0
 8005140:	000c      	movs	r4, r1
 8005142:	4233      	tst	r3, r6
 8005144:	d006      	beq.n	8005154 <__smakebuf_r+0x1c>
 8005146:	0023      	movs	r3, r4
 8005148:	3347      	adds	r3, #71	; 0x47
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	2301      	movs	r3, #1
 8005150:	6163      	str	r3, [r4, #20]
 8005152:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005154:	466a      	mov	r2, sp
 8005156:	ab01      	add	r3, sp, #4
 8005158:	f7ff ffc6 	bl	80050e8 <__swhatbuf_r>
 800515c:	9900      	ldr	r1, [sp, #0]
 800515e:	0007      	movs	r7, r0
 8005160:	0028      	movs	r0, r5
 8005162:	f7ff f8eb 	bl	800433c <_malloc_r>
 8005166:	2800      	cmp	r0, #0
 8005168:	d108      	bne.n	800517c <__smakebuf_r+0x44>
 800516a:	220c      	movs	r2, #12
 800516c:	5ea3      	ldrsh	r3, [r4, r2]
 800516e:	059a      	lsls	r2, r3, #22
 8005170:	d4ef      	bmi.n	8005152 <__smakebuf_r+0x1a>
 8005172:	2203      	movs	r2, #3
 8005174:	4393      	bics	r3, r2
 8005176:	431e      	orrs	r6, r3
 8005178:	81a6      	strh	r6, [r4, #12]
 800517a:	e7e4      	b.n	8005146 <__smakebuf_r+0xe>
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <__smakebuf_r+0x84>)
 800517e:	62ab      	str	r3, [r5, #40]	; 0x28
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	89a2      	ldrh	r2, [r4, #12]
 8005184:	6020      	str	r0, [r4, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	9b00      	ldr	r3, [sp, #0]
 800518c:	6120      	str	r0, [r4, #16]
 800518e:	6163      	str	r3, [r4, #20]
 8005190:	9b01      	ldr	r3, [sp, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <__smakebuf_r+0x7a>
 8005196:	0028      	movs	r0, r5
 8005198:	230e      	movs	r3, #14
 800519a:	5ee1      	ldrsh	r1, [r4, r3]
 800519c:	f000 f8d4 	bl	8005348 <_isatty_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d006      	beq.n	80051b2 <__smakebuf_r+0x7a>
 80051a4:	2203      	movs	r2, #3
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	4393      	bics	r3, r2
 80051aa:	001a      	movs	r2, r3
 80051ac:	2301      	movs	r3, #1
 80051ae:	4313      	orrs	r3, r2
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	89a0      	ldrh	r0, [r4, #12]
 80051b4:	4307      	orrs	r7, r0
 80051b6:	81a7      	strh	r7, [r4, #12]
 80051b8:	e7cb      	b.n	8005152 <__smakebuf_r+0x1a>
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	08004179 	.word	0x08004179

080051c0 <memchr>:
 80051c0:	b2c9      	uxtb	r1, r1
 80051c2:	1882      	adds	r2, r0, r2
 80051c4:	4290      	cmp	r0, r2
 80051c6:	d101      	bne.n	80051cc <memchr+0xc>
 80051c8:	2000      	movs	r0, #0
 80051ca:	4770      	bx	lr
 80051cc:	7803      	ldrb	r3, [r0, #0]
 80051ce:	428b      	cmp	r3, r1
 80051d0:	d0fb      	beq.n	80051ca <memchr+0xa>
 80051d2:	3001      	adds	r0, #1
 80051d4:	e7f6      	b.n	80051c4 <memchr+0x4>

080051d6 <memmove>:
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4288      	cmp	r0, r1
 80051da:	d902      	bls.n	80051e2 <memmove+0xc>
 80051dc:	188b      	adds	r3, r1, r2
 80051de:	4298      	cmp	r0, r3
 80051e0:	d303      	bcc.n	80051ea <memmove+0x14>
 80051e2:	2300      	movs	r3, #0
 80051e4:	e007      	b.n	80051f6 <memmove+0x20>
 80051e6:	5c8b      	ldrb	r3, [r1, r2]
 80051e8:	5483      	strb	r3, [r0, r2]
 80051ea:	3a01      	subs	r2, #1
 80051ec:	d2fb      	bcs.n	80051e6 <memmove+0x10>
 80051ee:	bd10      	pop	{r4, pc}
 80051f0:	5ccc      	ldrb	r4, [r1, r3]
 80051f2:	54c4      	strb	r4, [r0, r3]
 80051f4:	3301      	adds	r3, #1
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d1fa      	bne.n	80051f0 <memmove+0x1a>
 80051fa:	e7f8      	b.n	80051ee <memmove+0x18>

080051fc <__malloc_lock>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4802      	ldr	r0, [pc, #8]	; (8005208 <__malloc_lock+0xc>)
 8005200:	f7ff f899 	bl	8004336 <__retarget_lock_acquire_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	200002c4 	.word	0x200002c4

0800520c <__malloc_unlock>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4802      	ldr	r0, [pc, #8]	; (8005218 <__malloc_unlock+0xc>)
 8005210:	f7ff f892 	bl	8004338 <__retarget_lock_release_recursive>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	200002c4 	.word	0x200002c4

0800521c <_free_r>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	0005      	movs	r5, r0
 8005220:	2900      	cmp	r1, #0
 8005222:	d010      	beq.n	8005246 <_free_r+0x2a>
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da00      	bge.n	800522e <_free_r+0x12>
 800522c:	18e4      	adds	r4, r4, r3
 800522e:	0028      	movs	r0, r5
 8005230:	f7ff ffe4 	bl	80051fc <__malloc_lock>
 8005234:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <_free_r+0x90>)
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <_free_r+0x2c>
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	6014      	str	r4, [r2, #0]
 8005240:	0028      	movs	r0, r5
 8005242:	f7ff ffe3 	bl	800520c <__malloc_unlock>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	42a3      	cmp	r3, r4
 800524a:	d908      	bls.n	800525e <_free_r+0x42>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	1860      	adds	r0, r4, r1
 8005250:	4283      	cmp	r3, r0
 8005252:	d1f3      	bne.n	800523c <_free_r+0x20>
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	1841      	adds	r1, r0, r1
 800525a:	6021      	str	r1, [r4, #0]
 800525c:	e7ee      	b.n	800523c <_free_r+0x20>
 800525e:	001a      	movs	r2, r3
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <_free_r+0x4e>
 8005266:	42a3      	cmp	r3, r4
 8005268:	d9f9      	bls.n	800525e <_free_r+0x42>
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	1850      	adds	r0, r2, r1
 800526e:	42a0      	cmp	r0, r4
 8005270:	d10b      	bne.n	800528a <_free_r+0x6e>
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	1809      	adds	r1, r1, r0
 8005276:	1850      	adds	r0, r2, r1
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	4283      	cmp	r3, r0
 800527c:	d1e0      	bne.n	8005240 <_free_r+0x24>
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	1841      	adds	r1, r0, r1
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7da      	b.n	8005240 <_free_r+0x24>
 800528a:	42a0      	cmp	r0, r4
 800528c:	d902      	bls.n	8005294 <_free_r+0x78>
 800528e:	230c      	movs	r3, #12
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	e7d5      	b.n	8005240 <_free_r+0x24>
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	1860      	adds	r0, r4, r1
 8005298:	4283      	cmp	r3, r0
 800529a:	d103      	bne.n	80052a4 <_free_r+0x88>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1841      	adds	r1, r0, r1
 80052a2:	6021      	str	r1, [r4, #0]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	6054      	str	r4, [r2, #4]
 80052a8:	e7ca      	b.n	8005240 <_free_r+0x24>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	20000198 	.word	0x20000198

080052b0 <_realloc_r>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	0007      	movs	r7, r0
 80052b4:	000d      	movs	r5, r1
 80052b6:	0016      	movs	r6, r2
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d105      	bne.n	80052c8 <_realloc_r+0x18>
 80052bc:	0011      	movs	r1, r2
 80052be:	f7ff f83d 	bl	800433c <_malloc_r>
 80052c2:	0004      	movs	r4, r0
 80052c4:	0020      	movs	r0, r4
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	d103      	bne.n	80052d4 <_realloc_r+0x24>
 80052cc:	f7ff ffa6 	bl	800521c <_free_r>
 80052d0:	0034      	movs	r4, r6
 80052d2:	e7f7      	b.n	80052c4 <_realloc_r+0x14>
 80052d4:	f000 f84a 	bl	800536c <_malloc_usable_size_r>
 80052d8:	002c      	movs	r4, r5
 80052da:	42b0      	cmp	r0, r6
 80052dc:	d2f2      	bcs.n	80052c4 <_realloc_r+0x14>
 80052de:	0031      	movs	r1, r6
 80052e0:	0038      	movs	r0, r7
 80052e2:	f7ff f82b 	bl	800433c <_malloc_r>
 80052e6:	1e04      	subs	r4, r0, #0
 80052e8:	d0ec      	beq.n	80052c4 <_realloc_r+0x14>
 80052ea:	0029      	movs	r1, r5
 80052ec:	0032      	movs	r2, r6
 80052ee:	f7fe fed3 	bl	8004098 <memcpy>
 80052f2:	0029      	movs	r1, r5
 80052f4:	0038      	movs	r0, r7
 80052f6:	f7ff ff91 	bl	800521c <_free_r>
 80052fa:	e7e3      	b.n	80052c4 <_realloc_r+0x14>

080052fc <_read_r>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	0004      	movs	r4, r0
 8005300:	0008      	movs	r0, r1
 8005302:	0011      	movs	r1, r2
 8005304:	001a      	movs	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	4d05      	ldr	r5, [pc, #20]	; (8005320 <_read_r+0x24>)
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	f7fc fbb5 	bl	8001a7a <_read>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d103      	bne.n	800531c <_read_r+0x20>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d000      	beq.n	800531c <_read_r+0x20>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	200002cc 	.word	0x200002cc

08005324 <_fstat_r>:
 8005324:	2300      	movs	r3, #0
 8005326:	b570      	push	{r4, r5, r6, lr}
 8005328:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_fstat_r+0x20>)
 800532a:	0004      	movs	r4, r0
 800532c:	0008      	movs	r0, r1
 800532e:	0011      	movs	r1, r2
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	f7fc fbc9 	bl	8001ac8 <_fstat>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	d103      	bne.n	8005342 <_fstat_r+0x1e>
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d000      	beq.n	8005342 <_fstat_r+0x1e>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	200002cc 	.word	0x200002cc

08005348 <_isatty_r>:
 8005348:	2300      	movs	r3, #0
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	4d06      	ldr	r5, [pc, #24]	; (8005368 <_isatty_r+0x20>)
 800534e:	0004      	movs	r4, r0
 8005350:	0008      	movs	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fc fbc6 	bl	8001ae4 <_isatty>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d103      	bne.n	8005364 <_isatty_r+0x1c>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d000      	beq.n	8005364 <_isatty_r+0x1c>
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	bd70      	pop	{r4, r5, r6, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	200002cc 	.word	0x200002cc

0800536c <_malloc_usable_size_r>:
 800536c:	1f0b      	subs	r3, r1, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1f18      	subs	r0, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	da01      	bge.n	800537a <_malloc_usable_size_r+0xe>
 8005376:	580b      	ldr	r3, [r1, r0]
 8005378:	18c0      	adds	r0, r0, r3
 800537a:	4770      	bx	lr

0800537c <_init>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr

08005388 <_fini>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr
